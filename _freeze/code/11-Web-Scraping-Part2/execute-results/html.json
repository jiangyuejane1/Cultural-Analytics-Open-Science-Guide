{
  "hash": "37c74eeb8d0c3a7aa289dc91da82d2ae",
  "result": {
    "markdown": "# Web Scraping — Part 2\n\nIn this lesson, we're going to learn more about scraping data with the Python libraries requests and BeautifulSoup. We're also going to introduce *regular expressions*, which will help us extract and clean data in a more fine-grained way.\n\nWe will cover how to:\n\n* Programmatically access the text of a web page\n* Extract certain HTML elements\n* Extract and clean data with regular expressions\n\nOur goal for this lesson is to build a web scraping function called `get_all_songs_from_album` which will get all the song titles from any album on Genius.com.\n\n---\n\n**Import Requests and BeautifulSoup**\n\nWe're again going to use the `requests` library and the `BeautifulSoup` library to scrape our list of album songs.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:16.497529Z\",\"start_time\":\"2022-11-07T10:59:16.316382Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport requests\nfrom bs4 import BeautifulSoup\n```\n:::\n\n\n<img src=\"../images/Missy-Under-Construction.png\" class=\"center\" >\n\n The first album that we're going to scrape is Missy Elliott's \"Under Construction\" (2002), which debuted at No. 3 on The Billboard Top 200 charts.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:16.983025Z\",\"start_time\":\"2022-11-07T10:59:16.960629Z\"}' execution_count=2}\n``` {.python .cell-code}\nfrom IPython.display import IFrame\nIFrame(\"https://www.youtube.com/embed/cjIvu7e6Wq8?start=31\", width='500', height='400')\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n\n        <iframe\n            width=\"500\"\n            height=\"400\"\n            src=\"https://www.youtube.com/embed/cjIvu7e6Wq8?start=31\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n**Get HTML Data and Extract Text**\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:19.802052Z\",\"start_time\":\"2022-11-07T10:59:17.369053Z\"}' execution_count=3}\n``` {.python .cell-code}\nresponse = requests.get(\"https://genius.com/albums/Missy-elliott/Under-construction\")\nhtml_string = response.text\n```\n:::\n\n\n**Transform into BeautifulSoup Document**\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:19.859930Z\",\"start_time\":\"2022-11-07T10:59:19.815887Z\"}' execution_count=4}\n``` {.python .cell-code}\ndocument = BeautifulSoup(html_string, \"html.parser\")\n```\n:::\n\n\n**Your Turn!**\n\nWe want to extract just the song titles from Missy Elliott's album \"Under Construction.\" Turn on your web browser's \"Inspect\" function and find the HTML tag associated with each song title.\n\n[https://genius.com/albums/Missy-elliott/Under-construction](https://genius.com/albums/Missy-elliott/Under-construction)\n\nSelect \"Click to show\" to see the answer.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:19.887391Z\",\"start_time\":\"2022-11-07T10:59:19.881780Z\"}' tags='[\"output_scroll\",\"hide-cell\"]' execution_count=5}\n``` {.python .cell-code}\nsong_title_tags = document.find_all(\"h3\")\nsong_title_tags\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n[<h3 class=\"chart_row-content-title\">\n               Intro/Go To The Floor\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Bring the Pain (Ft. Method Man)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Gossip Folks (Ft. Ludacris)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Work It\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Back in the Day (Ft. JAY-Z)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Funky Fresh Dressed (Ft. Ms. Jade)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Pussycat\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Nothing Out There for Me (Ft. Beyoncé)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Slide\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Play That Beat\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Ain't That Funny\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Hot\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Can You Hear Me (Ft. TLC)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Work It (Remix) (Ft. 50 Cent)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Drop the Bomb\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"chart_row-content-title\">\n               Can You Hear Me [Edit] (Ft. TLC)\n               <span class=\"chart_row-content-title-subtitle\">Lyrics</span>\n </h3>,\n <h3 class=\"annotation_label\">Does this album have any certifications?</h3>,\n <h3 class=\"annotation_label\">How did this album chart?</h3>,\n <h3>Misdemeanor</h3>,\n <h3>Block Party [Shelved]</h3>]\n```\n:::\n:::\n\n\nNow write a `for` loop that extracts the text from each song title tag and `.appends()` it to a list called `song_titles`:\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:19.910333Z\",\"start_time\":\"2022-11-07T10:59:19.907741Z\"}' tags='[\"hide_input\"]' execution_count=6}\n``` {.python .cell-code}\nsong_titles = []\nfor song in song_title_tags:\n    song_title_missy = song.text\n    song_titles.append(song_title_missy)\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:19.937254Z\",\"start_time\":\"2022-11-07T10:59:19.932746Z\"}' execution_count=7}\n``` {.python .cell-code}\nsong_titles\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n['\\n              Intro/Go To The Floor\\n              Lyrics\\n',\n '\\n              Bring the Pain (Ft.\\xa0Method\\xa0Man)\\n              Lyrics\\n',\n '\\n              Gossip Folks (Ft.\\xa0Ludacris)\\n              Lyrics\\n',\n '\\n              Work It\\n              Lyrics\\n',\n '\\n              Back in the Day (Ft.\\xa0JAY-Z)\\n              Lyrics\\n',\n '\\n              Funky Fresh Dressed (Ft.\\xa0Ms.\\xa0Jade)\\n              Lyrics\\n',\n '\\n              Pussycat\\n              Lyrics\\n',\n '\\n              Nothing Out There for Me (Ft.\\xa0Beyoncé)\\n              Lyrics\\n',\n '\\n              Slide\\n              Lyrics\\n',\n '\\n              Play That Beat\\n              Lyrics\\n',\n \"\\n              Ain't That Funny\\n              Lyrics\\n\",\n '\\n              Hot\\n              Lyrics\\n',\n '\\n              Can You Hear Me (Ft.\\xa0TLC)\\n              Lyrics\\n',\n '\\n              Work It (Remix) (Ft.\\xa050\\xa0Cent)\\n              Lyrics\\n',\n '\\n              Drop the Bomb\\n              Lyrics\\n',\n '\\n              Can You Hear Me [Edit] (Ft.\\xa0TLC)\\n              Lyrics\\n',\n 'Does this album have any certifications?',\n 'How did this album chart?',\n 'Misdemeanor',\n 'Block Party [Shelved]']\n```\n:::\n:::\n\n\nNow transform that same `for` loop into a list comprehension.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:19.964335Z\",\"start_time\":\"2022-11-07T10:59:19.961427Z\"}' tags='[\"hide_input\"]' execution_count=8}\n``` {.python .cell-code}\nmissy_song_titles = [song.text for song in song_title_tags]\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:19.994524Z\",\"start_time\":\"2022-11-07T10:59:19.988776Z\"}' execution_count=9}\n``` {.python .cell-code}\nmissy_song_titles\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n['\\n              Intro/Go To The Floor\\n              Lyrics\\n',\n '\\n              Bring the Pain (Ft.\\xa0Method\\xa0Man)\\n              Lyrics\\n',\n '\\n              Gossip Folks (Ft.\\xa0Ludacris)\\n              Lyrics\\n',\n '\\n              Work It\\n              Lyrics\\n',\n '\\n              Back in the Day (Ft.\\xa0JAY-Z)\\n              Lyrics\\n',\n '\\n              Funky Fresh Dressed (Ft.\\xa0Ms.\\xa0Jade)\\n              Lyrics\\n',\n '\\n              Pussycat\\n              Lyrics\\n',\n '\\n              Nothing Out There for Me (Ft.\\xa0Beyoncé)\\n              Lyrics\\n',\n '\\n              Slide\\n              Lyrics\\n',\n '\\n              Play That Beat\\n              Lyrics\\n',\n \"\\n              Ain't That Funny\\n              Lyrics\\n\",\n '\\n              Hot\\n              Lyrics\\n',\n '\\n              Can You Hear Me (Ft.\\xa0TLC)\\n              Lyrics\\n',\n '\\n              Work It (Remix) (Ft.\\xa050\\xa0Cent)\\n              Lyrics\\n',\n '\\n              Drop the Bomb\\n              Lyrics\\n',\n '\\n              Can You Hear Me [Edit] (Ft.\\xa0TLC)\\n              Lyrics\\n',\n 'Does this album have any certifications?',\n 'How did this album chart?',\n 'Misdemeanor',\n 'Block Party [Shelved]']\n```\n:::\n:::\n\n\nAre there things in your list that aren't song titles? If so, use `.find_all()` with more specific HTML attributes `attrs={}`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:20.129979Z\",\"start_time\":\"2022-11-07T10:59:20.126043Z\"}' execution_count=10}\n``` {.python .cell-code}\nsong_title_tags = document.find_all(\"h3\", attrs={\"class\": \"chart_row-content-title\"})\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:20.323242Z\",\"start_time\":\"2022-11-07T10:59:20.315842Z\"}' tags='[\"hide_input\"]' execution_count=11}\n``` {.python .cell-code}\n missy_song_titles\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n['\\n              Intro/Go To The Floor\\n              Lyrics\\n',\n '\\n              Bring the Pain (Ft.\\xa0Method\\xa0Man)\\n              Lyrics\\n',\n '\\n              Gossip Folks (Ft.\\xa0Ludacris)\\n              Lyrics\\n',\n '\\n              Work It\\n              Lyrics\\n',\n '\\n              Back in the Day (Ft.\\xa0JAY-Z)\\n              Lyrics\\n',\n '\\n              Funky Fresh Dressed (Ft.\\xa0Ms.\\xa0Jade)\\n              Lyrics\\n',\n '\\n              Pussycat\\n              Lyrics\\n',\n '\\n              Nothing Out There for Me (Ft.\\xa0Beyoncé)\\n              Lyrics\\n',\n '\\n              Slide\\n              Lyrics\\n',\n '\\n              Play That Beat\\n              Lyrics\\n',\n \"\\n              Ain't That Funny\\n              Lyrics\\n\",\n '\\n              Hot\\n              Lyrics\\n',\n '\\n              Can You Hear Me (Ft.\\xa0TLC)\\n              Lyrics\\n',\n '\\n              Work It (Remix) (Ft.\\xa050\\xa0Cent)\\n              Lyrics\\n',\n '\\n              Drop the Bomb\\n              Lyrics\\n',\n '\\n              Can You Hear Me [Edit] (Ft.\\xa0TLC)\\n              Lyrics\\n',\n 'Does this album have any certifications?',\n 'How did this album chart?',\n 'Misdemeanor',\n 'Block Party [Shelved]']\n```\n:::\n:::\n\n\n## Regular Expressions\n\nGreat! Now we have have our list of song titles from Missy Elliot's album \"Under Construction.\" But if you notice, these song titles are pretty messy, and we need to clean them up.\n\nTo do so, we're going to use built-in string methods and a Python library called `re`, short for regular expressions.\n\nRegular expressions are basically like a very sophisticated find-and-replace. Regular expression are not exclusive to Python and are used in many programming languages as well as in search engines, text editors, and word processors.\n\n### Import Regular Expressions Library\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:21.095266Z\",\"start_time\":\"2022-11-07T10:59:21.089467Z\"}' execution_count=12}\n``` {.python .cell-code}\nimport re\n```\n:::\n\n\nTo practice with regular expressions, we're going to use a sample messy song title from our messy song titles list.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:21.454208Z\",\"start_time\":\"2022-11-07T10:59:21.450218Z\"}' execution_count=13}\n``` {.python .cell-code}\nsample_song = \"\\n              Back in the Day (Ft.\\xa0JAY-Z)\\n              Lyrics\\n\"\n```\n:::\n\n\n**Replace with Python String Method**\n\nRemember the string method `.replace()`? With this built-in string method, we can easily get rid of the new line characters `\\n` or the word \"Lyrics\" from our `sample_song`, which is very useful.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:22.049493Z\",\"start_time\":\"2022-11-07T10:59:22.041188Z\"}' tags='[\"hide-output\"]' execution_count=14}\n``` {.python .cell-code}\nsample_song.replace(\"\\n\", \"\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'              Back in the Day (Ft.\\xa0JAY-Z)              Lyrics'\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:22.220074Z\",\"start_time\":\"2022-11-07T10:59:22.211590Z\"}' tags='[\"hide-output\"]' execution_count=15}\n``` {.python .cell-code}\nsample_song.replace(\"Lyrics\", \"\")\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n'\\n              Back in the Day (Ft.\\xa0JAY-Z)\\n              \\n'\n```\n:::\n:::\n\n\n### Replace with Regex\n\nHowever, with regular expressions, we can replace strings with even more power and flexibility.\n\nTo replace a string with regular expressions, we use `re.sub(old_pattern, new_pattern, text_that_contains_pattern)`. We can do exactly the same thing that we did with the built-in string method `.replace()`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:23.343727Z\",\"start_time\":\"2022-11-07T10:59:23.335009Z\"}' tags='[\"hide-output\"]' execution_count=16}\n``` {.python .cell-code}\nsample_song\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'\\n              Back in the Day (Ft.\\xa0JAY-Z)\\n              Lyrics\\n'\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:23.539694Z\",\"start_time\":\"2022-11-07T10:59:23.531549Z\"}' tags='[\"hide-output\"]' execution_count=17}\n``` {.python .cell-code}\nre.sub(\"\\n\", \"\", sample_song)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n'              Back in the Day (Ft.\\xa0JAY-Z)              Lyrics'\n```\n:::\n:::\n\n\n## Special RegEx Characters\n\nBut regular expressions have certain characters with special pattern-matching powers, which is what allows us to do more cleaning, manipulating, and searching than with basic string methods. Below are some of the special regular expression characters.\n\n\n| Regular Expression Pattern       | Matches |\n|:---------------------------:|:-----------------------------------------------------------------------------------------------------------:|\n| `.` | any character                                         | \n| `\\w` | word                                         | \n| `\\W`                      | NOT word                                           |  \n| `\\d` | digit                                         | \n| `\\D`                      | NOT digit                                           | \n| `\\s` | whitespace                                         | \n| `\\S`                      | NOT whitespace                                          | \n| `[abc]`                      | Any of abc                                         |\n| `[^abc]`                      | Not any of abc                                         | \n| `(abc)`                      | Specific capture of \"abc\"                                         \n| `+`                      | 1 or more instances                                       | \n| `*`                      | 0 or more instances                                         | \n| `?`                      | 0 or 1 instance                                        | \n                   \n\nYou can explore and experiment with regular expression characters and combinations at [Regexr.com](https://regexr.com/4vhf1).\n\nWe can replace anything that is not a word `\\W` with \" \":\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:24.718371Z\",\"start_time\":\"2022-11-07T10:59:24.706156Z\"}' tags='[\"hide-output\"]' execution_count=18}\n``` {.python .cell-code}\nre.sub(\"\\W\", \" \", sample_song)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n'               Back in the Day  Ft  JAY Z                Lyrics '\n```\n:::\n:::\n\n\nReplace anything that is a word `\\w` with \" \":\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:25.300634Z\",\"start_time\":\"2022-11-07T10:59:25.290250Z\"}' tags='[\"hide-output\"]' execution_count=19}\n``` {.python .cell-code}\nre.sub(\"\\w\", \" \", sample_song)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'\\n                              (  .\\xa0   - )\\n                    \\n'\n```\n:::\n:::\n\n\nThe character `+` means \"match one or more instance\" of the pattern, which allows us to remove multiple not word patterns in a row.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:25.729889Z\",\"start_time\":\"2022-11-07T10:59:25.719726Z\"}' execution_count=20}\n``` {.python .cell-code}\nre.sub(\"\\W+\", \" \", sample_song)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n' Back in the Day Ft JAY Z Lyrics '\n```\n:::\n:::\n\n\n## Compile Pattern\n\nAn efficient way to build and save a regular expression pattern is with `re.compile()`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:26.311499Z\",\"start_time\":\"2022-11-07T10:59:26.302015Z\"}' tags='[\"hide-output\"]' execution_count=21}\n``` {.python .cell-code}\nnot_word_pattern = re.compile(\"\\W+\")\nre.sub(not_word_pattern, \" \", sample_song)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n' Back in the Day Ft JAY Z Lyrics '\n```\n:::\n:::\n\n\n## Search for Pattern\n\nIn addition to replacing text, we can also find and return text. With `re.search()`, we can find and return any particular pattern. The `re.search()` function returns something called a \"match object,\" which we can access with `.group()`.\n\nFor example, searching with the pattern `\\w+` will return the very first word in `sample_song`:\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:27.330633Z\",\"start_time\":\"2022-11-07T10:59:27.321585Z\"}' tags='[\"hide-output\"]' execution_count=22}\n``` {.python .cell-code}\nword_pattern = re.compile(\"\\w+\")\nword_pattern.search(sample_song)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n<re.Match object; span=(15, 19), match='Back'>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:27.522214Z\",\"start_time\":\"2022-11-07T10:59:27.516599Z\"}' tags='[\"hide-output\"]' execution_count=23}\n``` {.python .cell-code}\nword_pattern.search(sample_song).group(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n'Back'\n```\n:::\n:::\n\n\n## Find All Instances of Pattern\n\nThe function `re.findall()` will return a list of every instance of a particular pattern.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:28.189840Z\",\"start_time\":\"2022-11-07T10:59:28.180621Z\"}' tags='[\"hide-output\"]' execution_count=24}\n``` {.python .cell-code}\nword_pattern = re.compile(\"\\w+\")\nword_pattern.findall(sample_song)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n['Back', 'in', 'the', 'Day', 'Ft', 'JAY', 'Z', 'Lyrics']\n```\n:::\n:::\n\n\nWhen you combine special regular expression characters, you can make your pattern matching very specific and very powerful. If we had a document that contains a bunch of email addresses, we could use the pattern `[\\w.]+@[\\w.]+` to find and extract the words that appear on other side of the `@` character, aka [find and extract all the email addresses](https://regexr.com/4vhfa).\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:28.637543Z\",\"start_time\":\"2022-11-07T10:59:28.632293Z\"}' execution_count=25}\n``` {.python .cell-code}\ntext_with_emails = \"The important email addresses are important@cool.com, signficant@sweet.org\"\nextracted_emails = re.findall('[\\w.]+@[\\w.]+', text_with_emails)\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:28.871844Z\",\"start_time\":\"2022-11-07T10:59:28.864330Z\"}' tags='[\"hide-output\"]' execution_count=26}\n``` {.python .cell-code}\nextracted_emails\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n['important@cool.com', 'signficant@sweet.org']\n```\n:::\n:::\n\n\n## Match Before a Certain String\n\nFor our song titles, we might want to [extract everything that comes before \"(Ft.)\"](regexr.com/4vhfg) because we don't care as much about the featured artists, and because the featured artists makes the song titles really long. To match everything that comes before a certain string, we can use the pattern `.*(?=desired_pattern)` which matches 0 or more `*` of any character `.` that comes before `(?=)` the string \"desired_pattern.\"\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:29.496540Z\",\"start_time\":\"2022-11-07T10:59:29.484342Z\"}' tags='[\"hide-output\"]' execution_count=27}\n``` {.python .cell-code}\nbefore_ft_pattern = re.compile(\".*(?=Ft)\")\nbefore_ft_pattern.search(sample_song).group(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n'              Back in the Day ('\n```\n:::\n:::\n\n\n## Backslash Escape Characters\n\nNice! We got everything before the featured artist. Well, almost. We still have a weird, lingering open parentheses. That's because we were matching \"Ft\" not \"(Ft\". Let's match everything before \"(Ft\" instead.\n\nTo do so, we're going to have to make a slight adjustment. Remember that parentheses `()` are special regular expression characters. To make clear that we mean a literal parentheses and not a special regular expression character, we have to use an escape backslash `\\` before the character. \n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:30.114462Z\",\"start_time\":\"2022-11-07T10:59:30.104031Z\"}' tags='[\"hide-output\"]' execution_count=28}\n``` {.python .cell-code}\nbefore_ft_pattern = re.compile(\".*(?=\\(Ft)\")\nclean_sample_song_title = before_ft_pattern.search(sample_song).group(0)\nclean_sample_song_title \n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n'              Back in the Day '\n```\n:::\n:::\n\n\n## Strip Leading and Trailing Whitespace\n\nThe last thing we'll do to clean up our song title is to use the built-in string method `.strip()` which strips leading and trailing whitespace.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:30.709682Z\",\"start_time\":\"2022-11-07T10:59:30.701169Z\"}' tags='[\"hide-output\"]' execution_count=29}\n``` {.python .cell-code}\nclean_sample_song_title.strip()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\n'Back in the Day'\n```\n:::\n:::\n\n\n## Build Functions and Put It All Together\n\nLet's put all this cleaning together in a function called `clean_up`. It will match and strip everything before \"(Ft.)\" if the song title contains a featured artist, and it will remove the word \"Lyrics\" and strip whitespace if the song title does not contain \"(Ft.)\".\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:31.247315Z\",\"start_time\":\"2022-11-07T10:59:31.239095Z\"}' execution_count=30}\n``` {.python .cell-code}\ndef clean_up(song_title):\n\n    if \"Ft\" in song_title:\n        before_ft_pattern = re.compile(\".*(?=\\(Ft)\")\n        song_title_before_ft = before_ft_pattern.search(song_title).group(0)\n        clean_song_title = song_title_before_ft.strip()\n    \n    else:\n        song_title_no_lyrics = song_title.replace(\"Lyrics\", \"\")\n        clean_song_title = song_title_no_lyrics.strip()\n    \n    return clean_song_title\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:31.468926Z\",\"start_time\":\"2022-11-07T10:59:31.456780Z\"}' execution_count=31}\n``` {.python .cell-code}\n[clean_up(song) for song in missy_song_titles]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n['Intro/Go To The Floor',\n 'Bring the Pain',\n 'Gossip Folks',\n 'Work It',\n 'Back in the Day',\n 'Funky Fresh Dressed',\n 'Pussycat',\n 'Nothing Out There for Me',\n 'Slide',\n 'Play That Beat',\n \"Ain't That Funny\",\n 'Hot',\n 'Can You Hear Me',\n 'Work It (Remix)',\n 'Drop the Bomb',\n 'Can You Hear Me [Edit]',\n 'Does this album have any certifications?',\n 'How did this album chart?',\n 'Misdemeanor',\n 'Block Party [Shelved]']\n```\n:::\n:::\n\n\nWe were able to extract the song titles for Missy Elliott's album \"Under Construction.\" Success! But now we want to make a function that can do the same thing for any artist and album title.\n\nTake a look at [Beyonce's album \"Lemonade\"](https://genius.com/albums/Beyonce/Lemonade) on Genius.com and see how the web page compares to Missy Elliott's \"Under Construction.\" They look extremely similar, right? Because all Genius album pages are identical, we can use the same code that we did for Missy Elliott and just substitute in different artist and album names with an f-string for the Genius URL:\n\n`f\"https://genius.com/albums/{artist}/{album_name}\"`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:31.897488Z\",\"start_time\":\"2022-11-07T10:59:31.887337Z\"}' execution_count=32}\n``` {.python .cell-code}\ndef get_all_songs_from_album(artist, album_name):\n    \n    artist = artist.replace(\" \", \"-\")\n    album_name = album_name.replace(\" \", \"-\")\n    \n    response = requests.get(f\"https://genius.com/albums/{artist}/{album_name}\")\n    html_string = response.text\n    document = BeautifulSoup(html_string, \"html.parser\")\n    song_title_tags = document.find_all(\"h3\", attrs={\"class\": \"chart_row-content-title\"})\n    song_titles = [song_title.text for song_title in song_title_tags]\n    \n    clean_songs = []\n    for song_title in song_titles:\n        clean_song = clean_up(song_title)\n        clean_songs.append(clean_song)\n        \n    return clean_songs\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:32.472834Z\",\"start_time\":\"2022-11-07T10:59:32.078917Z\"}' tags='[\"hide-output\"]' execution_count=33}\n``` {.python .cell-code}\nget_all_songs_from_album('Beyonce', 'Lemonade')\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n['Pray You Catch Me',\n 'Hold Up',\n \"Don't Hurt Yourself\",\n 'Sorry',\n '6 Inch',\n 'Daddy Lessons',\n 'Love Drought',\n 'Sandcastles',\n 'Forward',\n 'Freedom',\n 'All Night',\n 'Formation',\n 'Lemonade Film (Script)']\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:35.222021Z\",\"start_time\":\"2022-11-07T10:59:32.493326Z\"}' tags='[\"hide-output\"]' execution_count=34}\n``` {.python .cell-code}\nget_all_songs_from_album('Taylor Swift', 'Red')\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n['State of Grace',\n 'Red',\n 'Treacherous',\n 'I Knew You Were Trouble.',\n 'All Too Well',\n '22',\n 'I Almost Do',\n 'We Are Never Ever Getting Back Together',\n 'Stay Stay Stay',\n 'The Last Time',\n 'Holy Ground',\n 'Sad Beautiful Tragic',\n 'The Lucky One',\n 'Everything Has Changed',\n 'Starlight',\n 'Begin Again',\n 'The Moment I Knew',\n 'Come Back... Be Here',\n 'Girl at Home']\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:37.057917Z\",\"start_time\":\"2022-11-07T10:59:35.242682Z\"}' tags='[\"hide-output\"]' execution_count=35}\n``` {.python .cell-code}\nget_all_songs_from_album('Mitski', 'Be The Cowboy')\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n['Geyser',\n \"Why Didn't You Stop Me?\",\n 'Old Friend',\n 'A Pearl',\n 'Lonesome Love',\n 'Remember My Name',\n 'Me and My Husband',\n 'Come Into the Water',\n 'Nobody',\n 'Pink in the Night',\n 'A Horse Named Cold Air',\n 'Washing Machine Heart',\n 'Blue Light',\n 'Two Slow Dancers']\n```\n:::\n:::\n\n\n## Your Turn!\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:59:37.350434Z\",\"start_time\":\"2022-11-07T10:59:37.077486Z\"}' execution_count=36}\n``` {.python .cell-code}\nget_all_songs_from_album('#Your Choice of Artist', '#Your Choice of Album')\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n[]\n```\n:::\n:::\n\n\n",
    "supporting": [
      "11-Web-Scraping-Part2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}