{
  "hash": "51b1c6682896b3d3bb414a10992c31ef",
  "result": {
    "markdown": "# Pandas — Merge Datasets\n\nIn this lesson, we're going to demonstrate how to merge two datasets with Pandas. We're going to walk through a real-world example of how I merged two different datasets published by *The Pudding* to create the CSV file that we used in the previous lesson.\n\n---\n\n## Dataset\n### *The Pudding*'s Film Dialogue Data\n\nWhen Hannah Andersen and Matt Daniels [published](https://github.com/matthewfdaniels/scripts/) the data behind their [*Pudding* essay](https://pudding.cool/2017/03/film-dialogue/) about film dialogue, they published this data as a few different CSV files. But I wanted to combine them into a single CSV file.\n\n___\n\n**Import Pandas**\n\nTo use the Pandas library, we first need to `import` it.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:42.823982Z\",\"start_time\":\"2022-11-07T10:55:42.511891Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\nThe above `import` statement not only imports the Pandas library but also gives it an alias or nickname — `pd`. This alias will save us from having to type out the entire words `pandas` each time we need to use it. Many Python libraries have commonly used aliases like `pd`.\n\n**Set Display Settings**\n\nBy default, Pandas will display 60 rows and 20 columns. I often change [Pandas' default display settings](https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html) to show more rows or columns.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:43.187914Z\",\"start_time\":\"2022-11-07T10:55:43.183487Z\"}' execution_count=2}\n``` {.python .cell-code}\npd.options.display.max_rows = 100\n```\n:::\n\n\n**Read in CSV File**\n\nTo read in a CSV file, we will use the function `pd.read_csv()` and insert the name of our desired file path. \n\nHannah Andersen and Matt Daniels published one CSV file called \"meta_data7.csv\" that contains, among things, the title of each movie, the year of its release, and its box office gross.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:43.853956Z\",\"start_time\":\"2022-11-07T10:55:43.827623Z\"}' execution_count=3}\n``` {.python .cell-code}\nmetadata = pd.read_csv('../data/Pudding/meta_data7.csv', delimiter=',', encoding='utf-8')\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:44.012174Z\",\"start_time\":\"2022-11-07T10:55:43.984187Z\"}' tags='[\"full-width\"]' execution_count=4}\n``` {.python .cell-code}\nmetadata\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>script_id</th>\n      <th>imdb_id</th>\n      <th>title</th>\n      <th>year</th>\n      <th>gross</th>\n      <th>lines_data</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1534</td>\n      <td>tt1022603</td>\n      <td>(500) Days of Summer</td>\n      <td>2009</td>\n      <td>37.0</td>\n      <td>7435445256774780000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1512</td>\n      <td>tt0147800</td>\n      <td>10 Things I Hate About You</td>\n      <td>1999</td>\n      <td>65.0</td>\n      <td>1777752320274530000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1514</td>\n      <td>tt0417385</td>\n      <td>12 and Holding</td>\n      <td>2005</td>\n      <td>NaN</td>\n      <td>5461357777754220000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1517</td>\n      <td>tt2024544</td>\n      <td>12 Years a Slave</td>\n      <td>2013</td>\n      <td>60.0</td>\n      <td>4567334777777780000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1520</td>\n      <td>tt1542344</td>\n      <td>127 Hours</td>\n      <td>2010</td>\n      <td>20.0</td>\n      <td>453513352345766000000000000000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1995</th>\n      <td>3765</td>\n      <td>tt0403702</td>\n      <td>Youth in Revolt</td>\n      <td>2009</td>\n      <td>17.0</td>\n      <td>7766777656545340000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>1996</th>\n      <td>3766</td>\n      <td>tt1790885</td>\n      <td>Zero Dark Thirty</td>\n      <td>2012</td>\n      <td>104.0</td>\n      <td>5677677556654470000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>1997</th>\n      <td>8158</td>\n      <td>tt0120906</td>\n      <td>Zero Effect</td>\n      <td>1998</td>\n      <td>3.0</td>\n      <td>4777774477777650000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>1998</th>\n      <td>3768</td>\n      <td>tt0421090</td>\n      <td>Zerophilia</td>\n      <td>2005</td>\n      <td>NaN</td>\n      <td>7647774446763350000000000000000000000000000000...</td>\n    </tr>\n    <tr>\n      <th>1999</th>\n      <td>6491</td>\n      <td>tt0443706</td>\n      <td>Zodiac</td>\n      <td>2007</td>\n      <td>41.0</td>\n      <td>2447767766763570000000000000000000000000000000...</td>\n    </tr>\n  </tbody>\n</table>\n<p>2000 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe're going to drop the column \"lines_data\", which contains information about when during the film each character speaks.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:44.319605Z\",\"start_time\":\"2022-11-07T10:55:44.311749Z\"}' execution_count=5}\n``` {.python .cell-code}\nmetadata = metadata.drop(columns='lines_data')\n```\n:::\n\n\nThey published another CSV file called \"character_list5.csv\" that contains, among other things, the name, gender, and age of each character as well as the number of words the character speaks.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:44.680536Z\",\"start_time\":\"2022-11-07T10:55:44.646664Z\"}' execution_count=6}\n``` {.python .cell-code}\ncharacters = pd.read_csv('../data/Pudding/character_list5.csv', delimiter=',',encoding='utf-8')\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:44.846168Z\",\"start_time\":\"2022-11-07T10:55:44.826907Z\"}' execution_count=7}\n``` {.python .cell-code}\ncharacters\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>script_id</th>\n      <th>imdb_character_name</th>\n      <th>words</th>\n      <th>gender</th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>280</td>\n      <td>betty</td>\n      <td>311</td>\n      <td>f</td>\n      <td>35.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>280</td>\n      <td>carolyn johnson</td>\n      <td>873</td>\n      <td>f</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>280</td>\n      <td>eleanor</td>\n      <td>138</td>\n      <td>f</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>280</td>\n      <td>francesca johns</td>\n      <td>2251</td>\n      <td>f</td>\n      <td>46.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>280</td>\n      <td>madge</td>\n      <td>190</td>\n      <td>f</td>\n      <td>46.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23043</th>\n      <td>9254</td>\n      <td>lumiere</td>\n      <td>1063</td>\n      <td>m</td>\n      <td>56.0</td>\n    </tr>\n    <tr>\n      <th>23044</th>\n      <td>9254</td>\n      <td>maurice</td>\n      <td>1107</td>\n      <td>m</td>\n      <td>71.0</td>\n    </tr>\n    <tr>\n      <th>23045</th>\n      <td>9254</td>\n      <td>monsieur d'arqu</td>\n      <td>114</td>\n      <td>m</td>\n      <td>58.0</td>\n    </tr>\n    <tr>\n      <th>23046</th>\n      <td>9254</td>\n      <td>mrs. potts</td>\n      <td>564</td>\n      <td>f</td>\n      <td>66.0</td>\n    </tr>\n    <tr>\n      <th>23047</th>\n      <td>9254</td>\n      <td>wardrobe</td>\n      <td>121</td>\n      <td>f</td>\n      <td>54.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>23048 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nAs you can see, the characters DataFrame doesn't include the actual title of the movie in which the character appears or the movie's release year or box office gross. And the metadata datafram doesn't contain any information about the characters. We want that info all in one place. So how can we combine all of this data together?\n\n## Merge Datasets\n\nIf you look closely, there's one column that both datasets share in common: \"script_id\". If two datasets share at least one column in common, we can merge them together based on this column.\n\nWe can use the [`pd.merge()` function](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html) and type in the name of the first dataframe, the name of the second dataframe, and the shared column to be merged on.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:45.534262Z\",\"start_time\":\"2022-11-07T10:55:45.500850Z\"}' tags='[\"full-width\",\"output_scroll\"]' execution_count=8}\n``` {.python .cell-code}\npd.merge(characters, metadata, on='script_id')\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>script_id</th>\n      <th>imdb_character_name</th>\n      <th>words</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>imdb_id</th>\n      <th>title</th>\n      <th>year</th>\n      <th>gross</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>280</td>\n      <td>betty</td>\n      <td>311</td>\n      <td>f</td>\n      <td>35.0</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>280</td>\n      <td>carolyn johnson</td>\n      <td>873</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>280</td>\n      <td>eleanor</td>\n      <td>138</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>280</td>\n      <td>francesca johns</td>\n      <td>2251</td>\n      <td>f</td>\n      <td>46.0</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>280</td>\n      <td>madge</td>\n      <td>190</td>\n      <td>f</td>\n      <td>46.0</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23043</th>\n      <td>9254</td>\n      <td>lumiere</td>\n      <td>1063</td>\n      <td>m</td>\n      <td>56.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n    </tr>\n    <tr>\n      <th>23044</th>\n      <td>9254</td>\n      <td>maurice</td>\n      <td>1107</td>\n      <td>m</td>\n      <td>71.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n    </tr>\n    <tr>\n      <th>23045</th>\n      <td>9254</td>\n      <td>monsieur d'arqu</td>\n      <td>114</td>\n      <td>m</td>\n      <td>58.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n    </tr>\n    <tr>\n      <th>23046</th>\n      <td>9254</td>\n      <td>mrs. potts</td>\n      <td>564</td>\n      <td>f</td>\n      <td>66.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n    </tr>\n    <tr>\n      <th>23047</th>\n      <td>9254</td>\n      <td>wardrobe</td>\n      <td>121</td>\n      <td>f</td>\n      <td>54.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>23048 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nNow we have a combined DataFrame with character and film information.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:45.855441Z\",\"start_time\":\"2022-11-07T10:55:45.835382Z\"}' execution_count=9}\n``` {.python .cell-code}\nmerged_movie_character = pd.merge(characters, metadata, on='script_id')\n```\n:::\n\n\n## Calculate Dialogue Proportions\n\nWe're going to add one more column to this dataset before the next lesson. We're going to calculate the proportion of words spoken in each film by each character. To do so, we're going to `.groupby()` the movie's title and calculate the sum total number of words spoken in each movie. \n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:46.372831Z\",\"start_time\":\"2022-11-07T10:55:46.344598Z\"}' execution_count=10}\n``` {.python .cell-code}\nmerged_movie_character.groupby('title')[['words']].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>words</th>\n    </tr>\n    <tr>\n      <th>title</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>(500) Days of Summer</th>\n      <td>18500</td>\n    </tr>\n    <tr>\n      <th>10 Things I Hate About You</th>\n      <td>19680</td>\n    </tr>\n    <tr>\n      <th>12 Years a Slave</th>\n      <td>19628</td>\n    </tr>\n    <tr>\n      <th>12 and Holding</th>\n      <td>15968</td>\n    </tr>\n    <tr>\n      <th>127 Hours</th>\n      <td>5145</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Zero Effect</th>\n      <td>13927</td>\n    </tr>\n    <tr>\n      <th>Zerophilia</th>\n      <td>16686</td>\n    </tr>\n    <tr>\n      <th>Zodiac</th>\n      <td>14656</td>\n    </tr>\n    <tr>\n      <th>eXistenZ</th>\n      <td>9447</td>\n    </tr>\n    <tr>\n      <th>xXx</th>\n      <td>8285</td>\n    </tr>\n  </tbody>\n</table>\n<p>1994 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\nIf we use the `.transform()`, we can turn this groupby into a single column of data.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:46.710914Z\",\"start_time\":\"2022-11-07T10:55:46.690789Z\"}' execution_count=11}\n``` {.python .cell-code}\nmerged_movie_character.groupby(['title'])[['words']].transform(sum)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>words</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6394</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6394</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6394</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6394</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6394</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23043</th>\n      <td>10159</td>\n    </tr>\n    <tr>\n      <th>23044</th>\n      <td>10159</td>\n    </tr>\n    <tr>\n      <th>23045</th>\n      <td>10159</td>\n    </tr>\n    <tr>\n      <th>23046</th>\n      <td>10159</td>\n    </tr>\n    <tr>\n      <th>23047</th>\n      <td>10159</td>\n    </tr>\n  </tbody>\n</table>\n<p>23048 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:46.876368Z\",\"start_time\":\"2022-11-07T10:55:46.859963Z\"}' execution_count=12}\n``` {.python .cell-code}\ntotal_movie_words = merged_movie_character.groupby(['title'])[['words']].transform(sum)\n```\n:::\n\n\nThen we're going to divide the total number of words spoken by each character by the total number of words spoken in each film.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:47.207792Z\",\"start_time\":\"2022-11-07T10:55:47.203134Z\"}' execution_count=13}\n``` {.python .cell-code}\ntotal_character_words = merged_movie_character[['words']]\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:47.389914Z\",\"start_time\":\"2022-11-07T10:55:47.377211Z\"}' execution_count=14}\n``` {.python .cell-code}\ntotal_character_words / total_movie_words\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>words</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.048639</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.136534</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.021583</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.352049</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.029715</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23043</th>\n      <td>0.104636</td>\n    </tr>\n    <tr>\n      <th>23044</th>\n      <td>0.108967</td>\n    </tr>\n    <tr>\n      <th>23045</th>\n      <td>0.011222</td>\n    </tr>\n    <tr>\n      <th>23046</th>\n      <td>0.055517</td>\n    </tr>\n    <tr>\n      <th>23047</th>\n      <td>0.011911</td>\n    </tr>\n  </tbody>\n</table>\n<p>23048 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:47.542777Z\",\"start_time\":\"2022-11-07T10:55:47.540309Z\"}' execution_count=15}\n``` {.python .cell-code}\ndialogue_proportion = total_character_words / total_movie_words\n```\n:::\n\n\nThen we're going to add it as a new column.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:47.888029Z\",\"start_time\":\"2022-11-07T10:55:47.882363Z\"}' execution_count=16}\n``` {.python .cell-code}\nmerged_movie_character['proportion_of_dialogue'] = dialogue_proportion\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:48.075045Z\",\"start_time\":\"2022-11-07T10:55:48.057678Z\"}' tags='[\"full-width\",\"output_scroll\"]' execution_count=17}\n``` {.python .cell-code}\nmerged_movie_character\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>script_id</th>\n      <th>imdb_character_name</th>\n      <th>words</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>imdb_id</th>\n      <th>title</th>\n      <th>year</th>\n      <th>gross</th>\n      <th>proportion_of_dialogue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>280</td>\n      <td>betty</td>\n      <td>311</td>\n      <td>f</td>\n      <td>35.0</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n      <td>0.048639</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>280</td>\n      <td>carolyn johnson</td>\n      <td>873</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n      <td>0.136534</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>280</td>\n      <td>eleanor</td>\n      <td>138</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n      <td>0.021583</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>280</td>\n      <td>francesca johns</td>\n      <td>2251</td>\n      <td>f</td>\n      <td>46.0</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n      <td>0.352049</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>280</td>\n      <td>madge</td>\n      <td>190</td>\n      <td>f</td>\n      <td>46.0</td>\n      <td>tt0112579</td>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>142.0</td>\n      <td>0.029715</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23043</th>\n      <td>9254</td>\n      <td>lumiere</td>\n      <td>1063</td>\n      <td>m</td>\n      <td>56.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n      <td>0.104636</td>\n    </tr>\n    <tr>\n      <th>23044</th>\n      <td>9254</td>\n      <td>maurice</td>\n      <td>1107</td>\n      <td>m</td>\n      <td>71.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n      <td>0.108967</td>\n    </tr>\n    <tr>\n      <th>23045</th>\n      <td>9254</td>\n      <td>monsieur d'arqu</td>\n      <td>114</td>\n      <td>m</td>\n      <td>58.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n      <td>0.011222</td>\n    </tr>\n    <tr>\n      <th>23046</th>\n      <td>9254</td>\n      <td>mrs. potts</td>\n      <td>564</td>\n      <td>f</td>\n      <td>66.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n      <td>0.055517</td>\n    </tr>\n    <tr>\n      <th>23047</th>\n      <td>9254</td>\n      <td>wardrobe</td>\n      <td>121</td>\n      <td>f</td>\n      <td>54.0</td>\n      <td>tt0101414</td>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>452.0</td>\n      <td>0.011911</td>\n    </tr>\n  </tbody>\n</table>\n<p>23048 rows × 10 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Write to CSV File\n\nFinally, we're going to output this merged and more comprehensive dataset to a CSV file by using the `.to_csv()` method. We set the `index` parameter to `False` to remove the index column (the numbers in the left-most column).\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:55:49.190770Z\",\"start_time\":\"2022-11-07T10:55:49.008690Z\"}' execution_count=18}\n``` {.python .cell-code}\nmerged_movie_character.to_csv('../data/Pudding/Merged-Pudding-Film-Dialogue.csv', encoding='utf-8', index=False)\n```\n:::\n\n\n",
    "supporting": [
      "07-Pandas-Merge-Datasets_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}