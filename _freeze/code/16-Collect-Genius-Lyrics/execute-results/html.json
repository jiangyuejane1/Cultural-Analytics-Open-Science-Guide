{
  "hash": "f9d1d7d515a10105d2f8417fd64934ed",
  "result": {
    "markdown": "# Song Lyrics Collection\n\nIn this lesson, we're going to use a Python package called [LyricsGenius](https://github.com/johnwmillr/LyricsGenius) to collect song lyrics about any artist and album.\n\n## API Wrappers\nAn API wrapper is a package that makes an API easier to use and/or extends the API's functionality. A data scientist named John Miller wrote a Python package called [LyricsGenius,](https://github.com/johnwmillr/LyricsGenius) which makes working with the Genius API easier and adds functionality not offered by the Genius API.\n\nRemember when I said that companies typically don't offer access to their most lucrative data? Well, the Genius API doesn't offer you a way to get access to song lyrics. To solve this problem, LyricsGenius combines the Genius API with the web scraping library BeautifulSoup to get and save song lyrics.\n\n## Install the Package\n\nTo install LyricsGenius (and get the most updated version from GitHub), run:\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:08:38.075146Z\",\"start_time\":\"2022-11-07T11:08:30.934510Z\"}' execution_count=1}\n``` {.python .cell-code}\n!pip install git+https://github.com/johnwmillr/LyricsGenius.git\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCollecting git+https://github.com/johnwmillr/LyricsGenius.git\r\n  Cloning https://github.com/johnwmillr/LyricsGenius.git to /private/var/folders/xr/qnv284y17_7__833thz7bymw0000gn/T/pip-req-build-epq8ad93\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  Running command git clone --filter=blob:none --quiet https://github.com/johnwmillr/LyricsGenius.git /private/var/folders/xr/qnv284y17_7__833thz7bymw0000gn/T/pip-req-build-epq8ad93\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  Resolved https://github.com/johnwmillr/LyricsGenius.git to commit fa9528551043cd60376b900a0adacf239a93fae5\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n  Preparing metadata (setup.py) ... -\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\b \bdone\r\nRequirement already satisfied: beautifulsoup4>=4.6.0 in /Users/paschalis/opt/anaconda3/lib/python3.8/site-packages (from lyricsgenius==3.0.1) (4.11.1)\r\nRequirement already satisfied: requests>=2.20.0 in /Users/paschalis/opt/anaconda3/lib/python3.8/site-packages (from lyricsgenius==3.0.1) (2.28.1)\r\nRequirement already satisfied: soupsieve>1.2 in /Users/paschalis/opt/anaconda3/lib/python3.8/site-packages (from beautifulsoup4>=4.6.0->lyricsgenius==3.0.1) (2.3.1)\r\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/paschalis/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.20.0->lyricsgenius==3.0.1) (1.26.11)\r\nRequirement already satisfied: certifi>=2017.4.17 in /Users/paschalis/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.20.0->lyricsgenius==3.0.1) (2022.9.24)\r\nRequirement already satisfied: charset-normalizer<3,>=2 in /Users/paschalis/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.20.0->lyricsgenius==3.0.1) (2.0.12)\r\nRequirement already satisfied: idna<4,>=2.5 in /Users/paschalis/opt/anaconda3/lib/python3.8/site-packages (from requests>=2.20.0->lyricsgenius==3.0.1) (3.3)\r\n```\n:::\n:::\n\n\nCopy and paste your Genius \"Client Access Token\" into the quotation marks below, and run the cell to save your variable :\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:08:38.085709Z\",\"start_time\":\"2022-11-07T11:08:38.082934Z\"}' execution_count=2}\n``` {.python .cell-code}\nclient_access_token = \"INSERT YOUR CLIENT ACCESS TOKEN IN THESE QUOTATION MARKS\"\n```\n:::\n\n\nImport and initialize LyricsGenius\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:08:41.496880Z\",\"start_time\":\"2022-11-07T11:08:41.278167Z\"}' execution_count=3}\n``` {.python .cell-code}\nimport lyricsgenius\nLyricsGenius = lyricsgenius.Genius(client_access_token)\n```\n:::\n\n\n## Get Songs and Lyrics By a Specific Artist\n\nTo get the top songs and song lyrics from a specific artist you can use the method `.search_artist()`:\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:08:48.312180Z\",\"start_time\":\"2022-11-07T11:08:45.980824Z\"}' execution_count=4}\n``` {.python .cell-code}\n# artist = LyricsGenius.search_artist(\"Missy Elliott\", max_songs=6)\n```\n:::\n\n\nTo access the song titles, you can run `artist.songs`:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# artist.songs\n```\n:::\n\n\nInside each of those songs, LyricsGenius has already saved the song lyrics. You can access these lyrics by looping through `artist.songs` and pulling out `song.lyrics`:\n\n::: {.cell tags='[\"output_scroll\"]' execution_count=6}\n``` {.python .cell-code}\n# for song in artist.songs:\n#     print(song.lyrics)\n```\n:::\n\n\n## Get Specific Song and Lyrics By a Specific Artist\n\nTo get the song lyrics from a specific artist, you can use the method `.search_song()`\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# song = LyricsGenius.search_song(\"Missy Elliott\", \"Work It\")\n```\n:::\n\n\n::: {.cell tags='[\"output_scroll\"]' execution_count=8}\n``` {.python .cell-code}\n# song.lyrics\n```\n:::\n\n\n## Save Lyrics to .txt File\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# song.save_lyrics(extension='txt')\n```\n:::\n\n\n## Get Songs and Lyrics For a Specific Album\n\nAs you can see, LyricsGenius is an extremely useful Python package! But one thing that we can't do with LyricsGenius is get all the song lyrics for a particular album.\n\nSo we're going to use the web scraping functions that we wrote in the last lesson to get all the song titles for a specific album, then use LyricsGenius to get the lyrics for each of those songs, and then save them all as text files in a directory.\n\n**Import necessary Python libraries**\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:06.388368Z\",\"start_time\":\"2022-11-07T11:09:06.382703Z\"}' execution_count=10}\n``` {.python .cell-code}\nfrom bs4 import BeautifulSoup\nimport re\nimport lyricsgenius\nimport requests\nfrom pathlib import Path\n```\n:::\n\n\n**Make RegEx Function To Clean Up Songs**\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:09.116023Z\",\"start_time\":\"2022-11-07T11:09:09.105654Z\"}' execution_count=11}\n``` {.python .cell-code}\ndef clean_up(song_title):\n\n    if \"Ft\" in song_title:\n        before_ft_pattern = re.compile(\".*(?=\\(Ft)\")\n        song_title_before_ft = before_ft_pattern.search(song_title).group(0)\n        clean_song_title = song_title_before_ft.strip()\n        clean_song_title = clean_song_title.replace(\"/\", \"-\")\n    \n    else:\n        song_title_no_lyrics = song_title.replace(\"Lyrics\", \"\")\n        clean_song_title = song_title_no_lyrics.strip()\n        clean_song_title = clean_song_title.replace(\"/\", \"-\")\n    \n    return clean_song_title\n```\n:::\n\n\n**Make Function To Scrape Song Titles For Album**\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:11.023980Z\",\"start_time\":\"2022-11-07T11:09:11.012755Z\"}' execution_count=12}\n``` {.python .cell-code}\ndef get_all_songs_from_album(artist, album_name):\n    \n    artist = artist.replace(\" \", \"-\")\n    album_name = album_name.replace(\" \", \"-\")\n    \n    response = requests.get(f\"https://genius.com/albums/{artist}/{album_name}\")\n    html_string = response.text\n    document = BeautifulSoup(html_string, \"html.parser\")\n    song_title_tags = document.find_all(\"h3\", attrs={\"class\": \"chart_row-content-title\"})\n    song_titles = [song_title.text for song_title in song_title_tags]\n    \n    clean_songs = []\n    for song_title in song_titles:\n        clean_song = clean_up(song_title)\n        clean_songs.append(clean_song)\n        \n    return clean_songs\n```\n:::\n\n\n**Make Function To Download Lyrics For All Songs in Album**\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:12.735010Z\",\"start_time\":\"2022-11-07T11:09:12.721268Z\"}' execution_count=13}\n``` {.python .cell-code}\ndef download_album_lyrics(artist, album_name): \n    \n    # Set up LyricsGenius with your Genius API client access token\n    #client_access_token = Your-Client-Access-Token\n    LyricsGenius = lyricsgenius.Genius(client_access_token)\n    LyricsGenius.remove_section_headers = True\n    \n    # With the function that we previously created, go to Genius.com and get all song titles for a particular artist's album\n    clean_songs = get_all_songs_from_album(artist, album_name)\n    \n    for song in clean_songs:\n        \n        #For each song in the list, search for that song with LyricsGenius\n        song_object = LyricsGenius.search_song(song, artist)\n        \n        #If the song is not empty\n        if song_object != None:\n            \n            #Do some cleaning and prep for the filename of the song\n            artist_title = artist.replace(\" \", \"-\")\n            album_title = album_name.replace(\" \", \"-\")\n            song_title = song.replace(\"/\", \"-\")\n            song_title = song.replace(\" \", \"-\")\n            \n            #Establish the filename for each song inside a directory that begins with the artist's name and album title\n            custom_filename=f\"{artist_title}_{album_title}/{song_title}\"\n            \n            #A line of code that we need to create a directory\n             #os.makedirs(os.path.dirname(filename), exist_ok=True)\n            Path(f\"{artist_title}_{album_title}\").mkdir(parents=True, exist_ok=True)\n            \n            #Save the lyrics for the song as a text file\n            song_object.save_lyrics(filename=custom_filename, extension='txt', sanitize=False)\n        \n        #If the song doesn't contain lyrics\n        else:\n            print('No lyrics')\n```\n:::\n\n\n**Call the function**\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# download_album_lyrics(\"Missy Elliott\", \"Under Construction\")\n```\n:::\n\n\n",
    "supporting": [
      "16-Collect-Genius-Lyrics_files"
    ],
    "filters": [],
    "includes": {}
  }
}