{
  "hash": "139fa9e1313e2957c56140f0c2bb17ea",
  "result": {
    "markdown": "# Song Lyrics Analysis\n\nSince we now have access to all these great song lyrics, let's run some basic analyses on them. \n\n## Loop Through All Text Files in Directory\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:30.707352Z\",\"start_time\":\"2022-11-07T11:09:30.703771Z\"}' execution_count=1}\n``` {.python .cell-code}\nfrom pathlib import Path\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:31.104394Z\",\"start_time\":\"2022-11-07T11:09:31.100977Z\"}' execution_count=2}\n``` {.python .cell-code}\ndirectory_path = 'Missy-Elliott_Under-Construction/'\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:34.379293Z\",\"start_time\":\"2022-11-07T11:09:34.372033Z\"}' execution_count=3}\n``` {.python .cell-code}\nfor file in Path(directory_path).glob('*.txt'):\n    print(file)\n```\n:::\n\n\n## Count Words in Each File in Directory\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:39.077253Z\",\"start_time\":\"2022-11-07T11:09:39.066695Z\"}' execution_count=4}\n``` {.python .cell-code}\nstopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours',\n             'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers',\n             'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves',\n             'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are',\n             'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does',\n             'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until',\n             'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into',\n             'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down',\n             'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here',\n             'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\n             'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so',\n             'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now', 've', 'll', 'amp']\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:39.665014Z\",\"start_time\":\"2022-11-07T11:09:39.661739Z\"}' execution_count=5}\n``` {.python .cell-code}\nfrom collections import Counter\nimport re\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:39.969814Z\",\"start_time\":\"2022-11-07T11:09:39.964404Z\"}' execution_count=6}\n``` {.python .cell-code}\ndef split_into_words(any_chunk_of_text):\n    lowercase_text = any_chunk_of_text.lower()\n    split_words = re.split(\"\\W+\", lowercase_text)\n    return split_words \n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:40.485586Z\",\"start_time\":\"2022-11-07T11:09:40.478700Z\"}' execution_count=7}\n``` {.python .cell-code}\ndef get_most_frequent_words_directory(directory_path):\n    \n    number_of_desired_words = 20\n    meaningful_words_tally = Counter()\n    \n    for filepath in Path(directory_path).glob('*.txt'):\n            \n            full_text = open(filepath, encoding=\"utf-8\").read()\n            all_the_words = split_into_words(full_text)\n            meaningful_words = [word for word in all_the_words if word not in stopwords]\n            meaningful_words_tally.update(meaningful_words)\n    \n    most_frequent_meaningful_words = meaningful_words_tally.most_common(number_of_desired_words)\n\n    return most_frequent_meaningful_words\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:41.517106Z\",\"start_time\":\"2022-11-07T11:09:41.496756Z\"}' execution_count=8}\n``` {.python .cell-code}\nget_most_frequent_words_directory(\"Missy-Elliott_Under-Construction\")\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n[]\n```\n:::\n:::\n\n\n## Word Count Data Viz with Pandas\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:44.671050Z\",\"start_time\":\"2022-11-07T11:09:44.257125Z\"}' execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:09:46.400741Z\",\"start_time\":\"2022-11-07T11:09:44.676731Z\"}' execution_count=10}\n``` {.python .cell-code}\n# frequencies = get_most_frequent_words_directory(\"Missy-Elliott_Under-Construction\")\n\n# #Make Counter dictionary into a Pandas DataFrame\n# word_frequency_df = pd.DataFrame(frequencies, columns=['word', 'word_count'])\n# #Plot word counts\n# word_frequency_df.sort_values(by='word_count').plot(x='word', kind='barh', title=\"Missy Elliott's Under Construction:\\n Most Frequent Words\")\n```\n:::\n\n\n## Keywords in Context\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:10:03.300007Z\",\"start_time\":\"2022-11-07T11:10:03.296304Z\"}' execution_count=11}\n``` {.python .cell-code}\nfrom IPython.display import Markdown, display\nfrom pathlib import Path\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:10:03.750042Z\",\"start_time\":\"2022-11-07T11:10:03.743244Z\"}' execution_count=12}\n``` {.python .cell-code}\nkeyword = \"ti\"\n\nfor filepath in Path(directory_path).glob('*.txt'):\n    text = open(filepath).read()\n    \n    for line in text.split(\"\\n\"):\n        #Search for keyword\n        if re.search(f\"\\\\b{keyword}\\\\b\", line):\n            #Replace keyword with bolded keyword\n            line_with_bolding = re.sub(f\"\\\\b{keyword}\\\\b\", f\"**{keyword}**\", line, flags=re.IGNORECASE)\n            #Display line with bolded keyword\n            display(Markdown(line_with_bolding))\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T11:10:05.336306Z\",\"start_time\":\"2022-11-07T11:10:05.329074Z\"}' execution_count=13}\n``` {.python .cell-code}\nkeyword = \"Missy\"\n\nfor filepath in Path(directory_path).glob('*.txt'):\n    text = open(filepath).read()\n    \n    for line in text.split(\"\\n\"):\n        #Search for keyword\n        if re.search(f\"\\\\b{keyword}\\\\b\", line):\n            #Replace keyword with bolded keyword\n            line_with_bolding = re.sub(f\"\\\\b{keyword}\\\\b\", f\"**{keyword}**\", line, flags=re.IGNORECASE)\n            #Display line with bolded keyword\n            display(Markdown(line_with_bolding))\n```\n:::\n\n\n",
    "supporting": [
      "17-Lyrics-Analysis_files"
    ],
    "filters": [],
    "includes": {}
  }
}