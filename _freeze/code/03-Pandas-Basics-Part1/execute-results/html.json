{
  "hash": "90e292088dd8ea710fef806fcb7f6e5b",
  "result": {
    "markdown": "# Pandas Basics — Part 1\n\n*Note: You can explore the [associated workbook](https://mybinder.org/v2/gh/melaniewalsh/Intro-Cultural-Analytics/master?urlpath=lab/tree/book/03-Data-Analysis/workbooks/01.5-Pandas-Basics-Part1-WORKBOOK.ipynb) for this chapter in the cloud.*\n\nIn this lesson, we're going to introduce some of the basics of [Pandas](https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html), a powerful Python library for working with tabular data like CSV files.\n\nWe will cover how to:\n\n* Import Pandas\n* Read in a CSV file\n* Explore and filter data\n* Make simple plots and data visualizations\n* Write a CSV file\n\n___\n\n## Dataset\n### The Bellevue Almshouse Dataset\n\n<blockquote class=\"epigraph\" style=\" padding: 10px\">\n\nNineteenth-century immigration data was produced with the express purpose of reducing people to bodies; bodies to easily quantifiable aspects; and assigning value to those aspects which proved that the marginalized people to who they belonged were worth less than their elite counterparts.\n\n-Anelise Shrout, [\"(Re)Humanizing Data\"](https://crdh.rrchnm.org/essays/v01-10-(re)-humanizing-data/)\n</blockquote>\n\nThe dataset that we're working with in this lesson is the [Bellevue Almshouse Dataset](https://www.nyuirish.net/almshouse/the-almshouse-records/), created by historian and DH scholar Anelise Shrout. It includes information about Irish-born immigrants who were admitted to New York City's Bellevue Almshouse in the 1840s.\n\nThe Bellevue Almshouse was part of New York City's public health system, a place where poor, sick, homeless, and otherwise marginalized people were sent — sometimes voluntarily and sometimes forcibly. Devastated by widespread famine in Ireland, many Irish people fled their homes for New York City in the 1840s, and many of them ended up in the Bellevue Almshouse.\n\nWe're using the [Bellevue Almshouse Dataset](https://www.nyuirish.net/almshouse/the-almshouse-records/) to practice data analysis with Pandas because we want to think deeply about the consequences of reducing human life to data. As Shrout argues in [her essay](https://crdh.rrchnm.org/essays/v01-10-(re)-humanizing-data/), this data purposely reduced people to bodies and \"easily quantifiable aspects\" in order to devalue their lives, potentially enacting \"both epistemic and physical violence\" on them.\n\nWe want to think about how responsible data analysis requires more than just technical tools like Pandas. It also requires an interrogation of the data. Who collected this data? How and why was this data collected? What assumptions are present in this data? What are the consequences of this data in the world? What does this data reflect about the world? For example, Shrout claims that the \"Bellevue administrators framed any ailments or difficulties inmates might have had as a consequence of [their immigration] status\" — perhaps best exemplified by the fact that a frequent \"disease\" in the dataset is \"recent emigrant.\" Below we're going to explore the prevalence of \"recent emigrant\" in the data as well as other salient patterns.\n\n___\n\n## Import Pandas\n\n<div class=\"admonition note\" name=\"html-admonition\" style=\"background: lightblue; padding: 10px\">\n<p class=\"title\">Note</p>\nIf you installed Python with Anaconda, you should already have Pandas installed. If you did not install Python with Anaconda, see <a href=\"https://pandas.pydata.org/pandas-docs/stable/getting_started/install.html/\">Pandas Installation.</a>\n</div>\n\nTo use the Pandas library, we first need to `import` it.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:26.371974Z\",\"start_time\":\"2022-11-07T10:48:26.099792Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\nThe above `import` statement not only imports the Pandas library but also gives it an alias or nickname — `pd`. This alias will save us from having to type out the entire words `pandas` each time we need to use it. Many Python libraries have commonly used aliases like `pd`.\n\n## Set Display Settings\n\nBy default, Pandas will display 60 rows and 20 columns. I often change [Pandas' default display settings](https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html) to show more rows or columns.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:27.487978Z\",\"start_time\":\"2022-11-07T10:48:27.481540Z\"}' execution_count=2}\n``` {.python .cell-code}\npd.options.display.max_rows = 100\n```\n:::\n\n\n## Read in CSV File\n\nTo read in a CSV file, we will use the function `pd.read_csv()` and insert the name of our desired file path. \n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:28.356855Z\",\"start_time\":\"2022-11-07T10:48:28.325791Z\"}' execution_count=3}\n``` {.python .cell-code}\nbellevue_df = pd.read_csv('../data/bellevue_almshouse_modified.csv', delimiter=\",\")\n```\n:::\n\n\nThis creates a Pandas [DataFrame object](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dataframe) — often abbreviated as *df*, e.g., *bellevue_df*. A DataFrame looks and acts a lot like a spreadsheet. But it has special powers and functions that we will discuss in the next few lessons.\n\nWhen reading in the CSV file, we also specified the `encoding` and `delimiter`. The `delimiter` specifies the character that separates or \"delimits\" the columns in our dataset. For CSV files, the delimiter will most often be a comma. (CSV is short for *Comma Separated Values*.) Sometimes, however, the delimiter of a CSV file might be a tab (`\\t`) or, more rarely, another character.\n\n## Display Data\n\nWe can display a DataFrame in a Jupyter notebook simply by running a cell with the variable name of the DataFrame.\n\n<div class=\"admonition pandasreview\" name=\"html-admonition\" style=\"background: black; color: white; padding: 10px\">\n<p class=\"title\">Pandas Review</p>\n<code>NaN</code> is the Pandas value for any missing data. See <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html?highlight=nan/\">\"Working with missing data\"</a> for more information.\n     \n</div>\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:28.856690Z\",\"start_time\":\"2022-11-07T10:48:28.825830Z\"}' execution_count=4}\n``` {.python .cell-code}\nbellevue_df\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1847-04-17</td>\n      <td>Mary</td>\n      <td>Gallagher</td>\n      <td>28.0</td>\n      <td>recent emigrant</td>\n      <td>married</td>\n      <td>w</td>\n      <td>Child Alana 10 days</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1847-04-08</td>\n      <td>John</td>\n      <td>Sanin (?)</td>\n      <td>19.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Catherine 2 mo</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1847-04-17</td>\n      <td>Anthony</td>\n      <td>Clark</td>\n      <td>60.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Charles Riley afed 10 days</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1847-04-08</td>\n      <td>Lawrence</td>\n      <td>Feeney</td>\n      <td>32.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Child</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1847-04-13</td>\n      <td>Henry</td>\n      <td>Joyce</td>\n      <td>21.0</td>\n      <td>recent emigrant</td>\n      <td>NaN</td>\n      <td>m</td>\n      <td>Child 1 mo</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9579</th>\n      <td>1847-06-17</td>\n      <td>Mary</td>\n      <td>Smith</td>\n      <td>47.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9580</th>\n      <td>1847-06-22</td>\n      <td>Francis</td>\n      <td>Riley</td>\n      <td>29.0</td>\n      <td>lame</td>\n      <td>superintendent</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9581</th>\n      <td>1847-07-02</td>\n      <td>Martin</td>\n      <td>Dunn</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9582</th>\n      <td>1847-07-08</td>\n      <td>Elizabeth</td>\n      <td>Post</td>\n      <td>32.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9583</th>\n      <td>1847-04-28</td>\n      <td>Bridget</td>\n      <td>Ryan</td>\n      <td>28.0</td>\n      <td>destitution</td>\n      <td>spinster</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>9584 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere are a few important things to note about the DataFrame displayed here:\n\n* Index\n    * The bolded ascending numbers in the very left-hand column of the DataFrame is called the Pandas *Index*. You can select rows based on the Index.\n    * By default, the Index is a sequence of numbers starting with zero. However, you can change the Index to something else, such as one of the columns in your dataset.\n\n* Truncation\n    * The DataFrame is truncated, signaled by the ellipses in the middle `...` of every column.\n    * The DataFrame is truncated because we set our default display settings to 100 rows. Anything more than 100 rows will be truncated. To display all the rows, we would need to alter Pandas' default display settings yet again.\n\n* Rows x Columns\n    * Pandas reports how many rows and columns are in this dataset at the bottom of the output (9584 x 8 columns).\n    * This is very useful!\n\n### Display First *n* Rows\n\nTo look at the first *n* rows in a DataFrame, we can use a method called `.head()`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:29.855732Z\",\"start_time\":\"2022-11-07T10:48:29.833408Z\"}' execution_count=5}\n``` {.python .cell-code}\nbellevue_df.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1847-04-17</td>\n      <td>Mary</td>\n      <td>Gallagher</td>\n      <td>28.0</td>\n      <td>recent emigrant</td>\n      <td>married</td>\n      <td>w</td>\n      <td>Child Alana 10 days</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1847-04-08</td>\n      <td>John</td>\n      <td>Sanin (?)</td>\n      <td>19.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Catherine 2 mo</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:30.104227Z\",\"start_time\":\"2022-11-07T10:48:30.081459Z\"}' execution_count=6}\n``` {.python .cell-code}\nbellevue_df.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1847-04-17</td>\n      <td>Mary</td>\n      <td>Gallagher</td>\n      <td>28.0</td>\n      <td>recent emigrant</td>\n      <td>married</td>\n      <td>w</td>\n      <td>Child Alana 10 days</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1847-04-08</td>\n      <td>John</td>\n      <td>Sanin (?)</td>\n      <td>19.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Catherine 2 mo</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1847-04-17</td>\n      <td>Anthony</td>\n      <td>Clark</td>\n      <td>60.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Charles Riley afed 10 days</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1847-04-08</td>\n      <td>Lawrence</td>\n      <td>Feeney</td>\n      <td>32.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Child</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1847-04-13</td>\n      <td>Henry</td>\n      <td>Joyce</td>\n      <td>21.0</td>\n      <td>recent emigrant</td>\n      <td>NaN</td>\n      <td>m</td>\n      <td>Child 1 mo</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1847-04-14</td>\n      <td>Bridget</td>\n      <td>Hart</td>\n      <td>20.0</td>\n      <td>recent emigrant</td>\n      <td>spinster</td>\n      <td>w</td>\n      <td>Child</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1847-04-14</td>\n      <td>Mary</td>\n      <td>Green</td>\n      <td>40.0</td>\n      <td>recent emigrant</td>\n      <td>spinster</td>\n      <td>w</td>\n      <td>And child 2 months</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1847-04-19</td>\n      <td>Daniel</td>\n      <td>Loftus</td>\n      <td>27.0</td>\n      <td>destitution</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1847-04-10</td>\n      <td>James</td>\n      <td>Day</td>\n      <td>35.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1847-04-10</td>\n      <td>Margaret</td>\n      <td>Farrell</td>\n      <td>30.0</td>\n      <td>recent emigrant</td>\n      <td>widow</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Display Random Sample\n\nTo look at a random sample of rows, we can use the `.sample()` method.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:30.892933Z\",\"start_time\":\"2022-11-07T10:48:30.868751Z\"}' execution_count=7}\n``` {.python .cell-code}\nbellevue_df.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>6328</th>\n      <td>1847-08-12</td>\n      <td>Ellen</td>\n      <td>Burke</td>\n      <td>3.0</td>\n      <td>sickness</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7866</th>\n      <td>1847-07-02</td>\n      <td>Mary Ann</td>\n      <td>Flood</td>\n      <td>40.0</td>\n      <td>sickness</td>\n      <td>widow</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2037</th>\n      <td>1847-05-22</td>\n      <td>Edward</td>\n      <td>Gunn</td>\n      <td>17.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5966</th>\n      <td>1847-07-16</td>\n      <td>Jeremiah</td>\n      <td>Hunnifson</td>\n      <td>32.0</td>\n      <td>sickness</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1261</th>\n      <td>1847-03-11</td>\n      <td>Michael</td>\n      <td>Malowny</td>\n      <td>65.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>340</th>\n      <td>1847-05-14</td>\n      <td>John</td>\n      <td>Donnelly</td>\n      <td>26.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7736</th>\n      <td>1847-12-20</td>\n      <td>Martin</td>\n      <td>Gallagher</td>\n      <td>21.0</td>\n      <td>sickness</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7477</th>\n      <td>1847-11-22</td>\n      <td>Patrick</td>\n      <td>O'Connor</td>\n      <td>30.0</td>\n      <td>sickness</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8361</th>\n      <td>1847-06-01</td>\n      <td>Rose</td>\n      <td>Hall</td>\n      <td>32.0</td>\n      <td>sickness</td>\n      <td>married</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>1847-04-09</td>\n      <td>Jasper</td>\n      <td>Flood</td>\n      <td>4.0</td>\n      <td>recent emigrant</td>\n      <td>NaN</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Get Info\n\nTo get important info about all the columns in the DataFrame, we can use `.info()`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:31.519613Z\",\"start_time\":\"2022-11-07T10:48:31.487489Z\"}' execution_count=8}\n``` {.python .cell-code}\nbellevue_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 9584 entries, 0 to 9583\nData columns (total 8 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   date_in     9584 non-null   object \n 1   first_name  9580 non-null   object \n 2   last_name   9584 non-null   object \n 3   age         9534 non-null   float64\n 4   disease     6497 non-null   object \n 5   profession  8565 non-null   object \n 6   gender      9584 non-null   object \n 7   children    37 non-null     object \ndtypes: float64(1), object(7)\nmemory usage: 599.1+ KB\n```\n:::\n:::\n\n\nThis report will tell us how many non-null, or non-blank, values are in each column, as well as what *type* of data is in each column.\n\n\n\n| **Pandas Data Type** |  **Explanation**                                                                                   |\n|:-------------:|:---------------------------------------------------------------------------------------------------:|\n| `object`         | string                                                                               |\n| `float64`         | float                                               |\n| `int64`       | integer                                                        |\n| `datetime64`       |  date time              \n\n## Calculate Summary Statistics\n\nTo calculate summary statistics for every column in our DataFrame, we can use the `.describe()` method.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:32.307029Z\",\"start_time\":\"2022-11-07T10:48:32.287102Z\"}' execution_count=9}\n``` {.python .cell-code}\nbellevue_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>9534.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>30.332604</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>14.179608</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.080000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>21.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>28.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>39.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>97.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nBy default, `.describe()` will only compute columns with numerical data. To include all columns, we can use `include='all`.\n\n<div class=\"admonition pandasreview\" name=\"html-admonition\" style=\"background: black; color: white; padding: 10px\">\n<p class=\"title\">Pandas Review</p>\n<code>NaN</code> is the Pandas value for any missing data. See <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html?highlight=nan/\">\"Working with missing data\"</a> for more information.\n     \n</div>\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:32.935501Z\",\"start_time\":\"2022-11-07T10:48:32.896587Z\"}' execution_count=10}\n``` {.python .cell-code}\nbellevue_df.describe(include='all')\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>9584</td>\n      <td>9580</td>\n      <td>9584</td>\n      <td>9534.000000</td>\n      <td>6497</td>\n      <td>8565</td>\n      <td>9584</td>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>653</td>\n      <td>523</td>\n      <td>3142</td>\n      <td>NaN</td>\n      <td>75</td>\n      <td>172</td>\n      <td>5</td>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>1847-05-24</td>\n      <td>Mary</td>\n      <td>Kelly</td>\n      <td>NaN</td>\n      <td>sickness</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Child</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>113</td>\n      <td>979</td>\n      <td>137</td>\n      <td>NaN</td>\n      <td>2706</td>\n      <td>3108</td>\n      <td>4958</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>30.332604</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>14.179608</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.080000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>21.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>28.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>39.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>97.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere are some insights that can be gleaned from these summary statistics:\n- For the column **date_in**, the earliest recorded admission to the Bellevue Almshouse (**first**) is 1846-01-01  and the latest (**last**) is 1847-12-31 \n- For the column **first_name**, the most frequently occurring first name (**top**) is Mary, which appears 979 times (**freq**)\n- For the column **last_name**, the most frequently occurring last name (**top**) is Kelly, which appears 137 times (**freq**)\n- For the column **age**, average age in the dataset (**mean**) is 30, the youngest (**min**) is .8, and the oldest (**max**) is 97\n- For the columns **disease** and **profession**, there are 75 unique (**unique**) diseases and 172 unique (**unique**) professions\n- For the column **children**, there are 37 rows that include information about children (**count**) (i.e., rows that do not have blank values)\n\n\n## Select Columns\n\nTo select a column from the DataFrame, we will type the name of the DataFrame followed by square brackets and a column name in quotations marks.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:33.754643Z\",\"start_time\":\"2022-11-07T10:48:33.741994Z\"}' execution_count=11}\n``` {.python .cell-code}\nbellevue_df['disease']\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0       recent emigrant\n1       recent emigrant\n2       recent emigrant\n3       recent emigrant\n4       recent emigrant\n             ...       \n9579                NaN\n9580               lame\n9581                NaN\n9582                NaN\n9583        destitution\nName: disease, Length: 9584, dtype: object\n```\n:::\n:::\n\n\n<div class=\"admonition pythonreview\" name=\"html-admonition\" style=\"background: lightgreen; padding: 10px\">\n<p class=\"title\">Python Review</p>\n\n**Dictionary**\n    \n<code>\nperson1 = {\"name\": \"Mary Gallagher\",\n         \"age\": 28,\n         \"profession\": \"married\"}\n</code>\n\n**Key** -> **Value**\n<code>\nperson1['name'] —> \"Mary Gallagher\"\n</code> \n\nTechnically, a single column in a DataFrame is a [*Series* object](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#dsintro).\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:34.442013Z\",\"start_time\":\"2022-11-07T10:48:34.432299Z\"}' execution_count=12}\n``` {.python .cell-code}\ntype(bellevue_df['disease'])\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\nA Series object displays differently than a DataFrame object. To select a column as a DataFrame and not as a Series object, we will use two square brackets.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:34.862466Z\",\"start_time\":\"2022-11-07T10:48:34.846158Z\"}' execution_count=13}\n``` {.python .cell-code}\nbellevue_df[['disease']]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>disease</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9579</th>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9580</th>\n      <td>lame</td>\n    </tr>\n    <tr>\n      <th>9581</th>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9582</th>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9583</th>\n      <td>destitution</td>\n    </tr>\n  </tbody>\n</table>\n<p>9584 rows × 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:35.137481Z\",\"start_time\":\"2022-11-07T10:48:35.126453Z\"}' execution_count=14}\n``` {.python .cell-code}\ntype(bellevue_df[['disease']])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nBy using two square brackets, we can also select multiple columns at the same time.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:48:35.588108Z\",\"start_time\":\"2022-11-07T10:48:35.568229Z\"}' execution_count=15}\n``` {.python .cell-code}\nbellevue_df[['first_name', 'last_name', 'disease']]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>disease</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Mary</td>\n      <td>Gallagher</td>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John</td>\n      <td>Sanin (?)</td>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Anthony</td>\n      <td>Clark</td>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Lawrence</td>\n      <td>Feeney</td>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Henry</td>\n      <td>Joyce</td>\n      <td>recent emigrant</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9579</th>\n      <td>Mary</td>\n      <td>Smith</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9580</th>\n      <td>Francis</td>\n      <td>Riley</td>\n      <td>lame</td>\n    </tr>\n    <tr>\n      <th>9581</th>\n      <td>Martin</td>\n      <td>Dunn</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9582</th>\n      <td>Elizabeth</td>\n      <td>Post</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9583</th>\n      <td>Bridget</td>\n      <td>Ryan</td>\n      <td>destitution</td>\n    </tr>\n  </tbody>\n</table>\n<p>9584 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\n``` {warning}\nHeads up! The code below will cause an error.\n```\n\nSee what happens if we try to select multiple columns as a Series...\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:05.536290Z\",\"start_time\":\"2022-11-07T10:49:05.533217Z\"}' tags='[\"hide-output\"]' execution_count=16}\n``` {.python .cell-code}\n# bellevue_df['first_name', 'last_name', 'disease']\n```\n:::\n\n\n## Count Values\n\nTo count the number of *unique* values in a column, we can use the `.value_counts()` method.\n\n```{sidebar} On Bellevue Almshouse \"Diseases\"\n> Some were diagnosed with medically recognizable illnesses, including “fever,” “dropsy” and “neuralgia.” Others were diagnosed with “diseases” that made visible the ways in which immigrants were failing to meet the expectations of urban citizenship. These included “destitution” and “recent emigrant.” Neither of these diagnoses reflected an immigrant’s health. Nevertheless, they were treated as pathologies, and those pathologies governed city officials perceptions of immigrants. Sickness, injuries or destitution were subsumed under the pathology of “recent emigrant.” This diagnosis also determined immigrants’ paths through the New York City public health system.\n\n-Anelise Shrout, [\"(Re)Humanizing Data: Digitally Navigating the Bellevue Almshouse\"](https://crdh.rrchnm.org/essays/v01-10-(re)-humanizing-data/)\n```\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:06.706980Z\",\"start_time\":\"2022-11-07T10:49:06.692895Z\"}' execution_count=17}\n``` {.python .cell-code}\nbellevue_df['disease'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nsickness           2706\nrecent emigrant    1974\ndestitution         841\nfever               192\ninsane              138\npregnant            134\nsore                 79\nintemperance         71\nillegible            47\ntyphus               46\ninjuries             31\nulcers               26\nophthalmia           19\nvagrant              17\nlame                 15\nrheumatism           11\ndebility             11\nblind                 9\nbronchitis            9\ndropsy                8\nphthisis              8\nold age               7\nsyphilis              7\ndysentery             6\ndiarrhea              6\nerysipelas            6\nbroken bone           5\ncripple               5\nburn                  3\nmeasles               3\ndrunkenness           3\nsprain                2\ndelusion dreams       2\njaundice              2\nfits                  2\npneumonia             2\ntuberculosis          2\nscrofula              2\npiles                 2\nscarletina            2\nabandonment           2\ntumor                 1\nspinal disease        1\nphagadaena            1\nsunburn               1\nhernia                1\nparalysis             1\nabscess               1\nneuralgia             1\nhypochondria          1\nhorrors               1\nfrom trial            1\nungovernable          1\nsmallpox              1\ncolic                 1\nseizure               1\nbeggar                1\ncontusion             1\nrickets               1\ncut                   1\nascites               1\ndeaf                  1\ncongested head        1\neczema                1\nbruise                1\nsevered limb          1\nemotional             1\npoorly                1\ndisabled              1\nbleeding              1\norchitis              1\ndel femur             1\nthroat cut            1\nague                  1\nasthma                1\nName: disease, dtype: int64\n```\n:::\n:::\n\n\nLook through the so-called \"diseases\" recorded in the Bellevue Almshouse data and consider what these categories reflect about New York City in the 1840s, particularly with regard to immigration status.\n\nTo select the top 10 most frequent values in the \"disease\" column, we can combine `value_counts()` with regular Python list slicing.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:07.464601Z\",\"start_time\":\"2022-11-07T10:49:07.451608Z\"}' execution_count=18}\n``` {.python .cell-code}\nbellevue_df['disease'].value_counts()[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nsickness           2706\nrecent emigrant    1974\ndestitution         841\nfever               192\ninsane              138\npregnant            134\nsore                 79\nintemperance         71\nillegible            47\ntyphus               46\nName: disease, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:07.677060Z\",\"start_time\":\"2022-11-07T10:49:07.664603Z\"}' execution_count=19}\n``` {.python .cell-code}\nbellevue_df['profession'].value_counts()[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nlaborer       3108\nmarried       1584\nspinster      1521\nwidow         1053\nshoemaker      158\ntailor         116\nblacksmith     104\nmason           98\nweaver          66\ncarpenter       65\nName: profession, dtype: int64\n```\n:::\n:::\n\n\nIn a similar vein, consider what these \"professions\" reflect about New York City in the 1840s.\n\n## Make and Save Plots\n\nPandas makes it easy to create plots and data visualizations. We can make a simple plot by adding `.plot()` to any DataFrame or Series object that has appropriate numeric data.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:09.342010Z\",\"start_time\":\"2022-11-07T10:49:08.453983Z\"}' execution_count=20}\n``` {.python .cell-code}\nbellevue_df['disease'].value_counts()[:10].plot(kind='bar', title='Bellevue Almshouse:\\nMost Frequent \"Diseases\"')\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<AxesSubplot:title={'center':'Bellevue Almshouse:\\nMost Frequent \"Diseases\"'}>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-Pandas-Basics-Part1_files/figure-html/cell-21-output-2.png){}\n:::\n:::\n\n\n We specify the title with the `title=` parameter and the kind of plot by altering the `kind=` parameter:\n* ‘bar’ or ‘barh’ for bar plots\n\n* ‘hist’ for histogram\n\n* ‘box’ for boxplot\n\n* ‘kde’ or ‘density’ for density plots\n\n* ‘area’ for area plots\n\n* ‘scatter’ for scatter plots\n\n* ‘hexbin’ for hexagonal bin plots\n\n* ‘pie’ for pie plots\n \nFor example, to make a horizontal bar chart, we can set `kind='barh'`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:09.486980Z\",\"start_time\":\"2022-11-07T10:49:09.355158Z\"}' execution_count=21}\n``` {.python .cell-code}\nbellevue_df['disease'].value_counts()[:10].plot(kind='barh',title='Bellevue Almshouse:\\nMost Frequent \"Diseases\"').get_figure().savefig('Bellevue')\n```\n\n::: {.cell-output .cell-output-display}\n![](03-Pandas-Basics-Part1_files/figure-html/cell-22-output-1.png){}\n:::\n:::\n\n\nTo make a pie chart, we can set `kind='pie'`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:09.619991Z\",\"start_time\":\"2022-11-07T10:49:09.498436Z\"}' execution_count=22}\n``` {.python .cell-code}\nbellevue_df['profession'].value_counts()[:10].plot(kind='pie', figsize=(10, 10), title='Bellevue Almshouse:\\nMost Frequent \"Professions\"')\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n<AxesSubplot:title={'center':'Bellevue Almshouse:\\nMost Frequent \"Professions\"'}, ylabel='profession'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-Pandas-Basics-Part1_files/figure-html/cell-23-output-2.png){}\n:::\n:::\n\n\nTo save a plot as an image file or PDF file, we can assign the plot to a variable called `ax`, short for axes.\n\nThen we can use `ax.figure.savefig('FILE-NAME.png')` or `ax.figure.savefig('FILE-NAME.pdf')`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:10.107618Z\",\"start_time\":\"2022-11-07T10:49:09.861073Z\"}' execution_count=23}\n``` {.python .cell-code}\nax = bellevue_df['profession'].value_counts()[:10].plot(kind='pie', figsize=(10, 10), title='Bellevue Almshouse:\\nMost Frequent \"Professions\"')\nax.figure.savefig('Bellevue-professions_pie-chart.pdf')\n```\n\n::: {.cell-output .cell-output-display}\n![](03-Pandas-Basics-Part1_files/figure-html/cell-24-output-1.png){}\n:::\n:::\n\n\nIf your plot is being cut off in the image, see Pandas Basics Part 2 (\"Prevent Labels From Getting Cut Off\").\n\n## Filter/Subset Data\n\nWe can filter a Pandas DataFrame to select only certain values. Filtering data by certain values is similar to selecting columns.\n\nWe type the name of the DataFrame followed by square brackets and then, instead of inserting a column name, we insert a True/False condition. For example, to select only rows that contain the value \"teacher,\" we insert the condition `bellevue_df['profession'] == 'teacher'`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:11.307492Z\",\"start_time\":\"2022-11-07T10:49:11.283663Z\"}' execution_count=24}\n``` {.python .cell-code}\nbellevue_df[bellevue_df['profession'] == 'teacher']\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2195</th>\n      <td>1847-03-12</td>\n      <td>Michael</td>\n      <td>Rush</td>\n      <td>40.0</td>\n      <td>recent emigrant</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2692</th>\n      <td>1846-03-11</td>\n      <td>Thomas</td>\n      <td>Brady</td>\n      <td>45.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3773</th>\n      <td>1846-07-06</td>\n      <td>Henry</td>\n      <td>Dunlap</td>\n      <td>66.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4283</th>\n      <td>1846-09-03</td>\n      <td>John B.</td>\n      <td>Murray</td>\n      <td>45.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4286</th>\n      <td>1846-09-03</td>\n      <td>Alexander</td>\n      <td>Alcock</td>\n      <td>46.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4611</th>\n      <td>1846-10-15</td>\n      <td>John</td>\n      <td>Dillon</td>\n      <td>32.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5224</th>\n      <td>1847-03-01</td>\n      <td>George F.</td>\n      <td>Robins</td>\n      <td>57.0</td>\n      <td>destitution</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6251</th>\n      <td>1847-08-05</td>\n      <td>Patrick</td>\n      <td>McGowen</td>\n      <td>24.0</td>\n      <td>sickness</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8293</th>\n      <td>1847-05-27</td>\n      <td>William</td>\n      <td>Smith</td>\n      <td>29.0</td>\n      <td>destitution</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8641</th>\n      <td>1847-06-23</td>\n      <td>Thomas</td>\n      <td>Gleason</td>\n      <td>50.0</td>\n      <td>sickness</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt can be helpful to isolate this condition and see that it produces a long list of True/False pairs for every row.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:11.830623Z\",\"start_time\":\"2022-11-07T10:49:11.816025Z\"}' execution_count=25}\n``` {.python .cell-code}\nbellevue_df['profession'] == 'teacher'\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n0       False\n1       False\n2       False\n3       False\n4       False\n        ...  \n9579    False\n9580    False\n9581    False\n9582    False\n9583    False\nName: profession, Length: 9584, dtype: bool\n```\n:::\n:::\n\n\nFiltering DataFrames can sometimes get confusing and unwieldy (as conditions within conditions pile up like Russian dolls). It can be helpful to make a separate variable for a filter, as below.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:12.462532Z\",\"start_time\":\"2022-11-07T10:49:12.454069Z\"}' execution_count=26}\n``` {.python .cell-code}\nteacher_filter = bellevue_df['profession'] == 'teacher'\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:12.725690Z\",\"start_time\":\"2022-11-07T10:49:12.701528Z\"}' execution_count=27}\n``` {.python .cell-code}\nbellevue_df[teacher_filter]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2195</th>\n      <td>1847-03-12</td>\n      <td>Michael</td>\n      <td>Rush</td>\n      <td>40.0</td>\n      <td>recent emigrant</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2692</th>\n      <td>1846-03-11</td>\n      <td>Thomas</td>\n      <td>Brady</td>\n      <td>45.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3773</th>\n      <td>1846-07-06</td>\n      <td>Henry</td>\n      <td>Dunlap</td>\n      <td>66.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4283</th>\n      <td>1846-09-03</td>\n      <td>John B.</td>\n      <td>Murray</td>\n      <td>45.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4286</th>\n      <td>1846-09-03</td>\n      <td>Alexander</td>\n      <td>Alcock</td>\n      <td>46.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4611</th>\n      <td>1846-10-15</td>\n      <td>John</td>\n      <td>Dillon</td>\n      <td>32.0</td>\n      <td>NaN</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5224</th>\n      <td>1847-03-01</td>\n      <td>George F.</td>\n      <td>Robins</td>\n      <td>57.0</td>\n      <td>destitution</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>6251</th>\n      <td>1847-08-05</td>\n      <td>Patrick</td>\n      <td>McGowen</td>\n      <td>24.0</td>\n      <td>sickness</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8293</th>\n      <td>1847-05-27</td>\n      <td>William</td>\n      <td>Smith</td>\n      <td>29.0</td>\n      <td>destitution</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8641</th>\n      <td>1847-06-23</td>\n      <td>Thomas</td>\n      <td>Gleason</td>\n      <td>50.0</td>\n      <td>sickness</td>\n      <td>teacher</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIn a similar vein, it's often useful to make a new variable for a filtered DataFrame. For example, let's say we wanted to look at only the women in the dataset and see the most commons professions.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:13.286138Z\",\"start_time\":\"2022-11-07T10:49:13.279582Z\"}' execution_count=28}\n``` {.python .cell-code}\nwomen_filter = bellevue_df['gender'] == 'w'\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:13.616196Z\",\"start_time\":\"2022-11-07T10:49:13.607324Z\"}' execution_count=29}\n``` {.python .cell-code}\nbellevue_women = bellevue_df[women_filter]\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:13.863765Z\",\"start_time\":\"2022-11-07T10:49:13.852767Z\"}' execution_count=30}\n``` {.python .cell-code}\nbellevue_women['profession'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nmarried        1564\nspinster       1507\nwidow          1043\nlaborer          27\nseamstress        3\nbaker             2\nsingle            2\nwaiter            2\ncook              1\ntailor            1\nsham              1\ncarpenter         1\nweaver            1\npeddler           1\ngardener          1\n(illegible)       1\nservant           1\nName: profession, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:14.318278Z\",\"start_time\":\"2022-11-07T10:49:14.138780Z\"}' execution_count=31}\n``` {.python .cell-code}\nbellevue_women['profession'].value_counts().plot(kind='pie', figsize=(10,10), title='Bellevue Almshouse:\\nMost Frequent \"Professions\" Among Women')\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n<AxesSubplot:title={'center':'Bellevue Almshouse:\\nMost Frequent \"Professions\" Among Women'}, ylabel='profession'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](03-Pandas-Basics-Part1_files/figure-html/cell-32-output-2.png){}\n:::\n:::\n\n\nThere's a lot we can do with filters beyond exact value matches with an equals operator `==`.\n\nWe can also incorporate `>`, `<`, `>=`, `<=` with integers, floats, and even dates. For example, we can filter the DataFrame for only people who arrived to the Bellevue Almshouse on or after '1847-04-17'\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:14.618721Z\",\"start_time\":\"2022-11-07T10:49:14.615315Z\"}' execution_count=32}\n``` {.python .cell-code}\ndate_filter = bellevue_df['date_in'] >= '1847-04-17'\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:14.926999Z\",\"start_time\":\"2022-11-07T10:49:14.901223Z\"}' execution_count=33}\n``` {.python .cell-code}\nbellevue_df[date_filter]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date_in</th>\n      <th>first_name</th>\n      <th>last_name</th>\n      <th>age</th>\n      <th>disease</th>\n      <th>profession</th>\n      <th>gender</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1847-04-17</td>\n      <td>Mary</td>\n      <td>Gallagher</td>\n      <td>28.0</td>\n      <td>recent emigrant</td>\n      <td>married</td>\n      <td>w</td>\n      <td>Child Alana 10 days</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1847-04-17</td>\n      <td>Anthony</td>\n      <td>Clark</td>\n      <td>60.0</td>\n      <td>recent emigrant</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>Charles Riley afed 10 days</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1847-04-19</td>\n      <td>Daniel</td>\n      <td>Loftus</td>\n      <td>27.0</td>\n      <td>destitution</td>\n      <td>laborer</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>1847-04-17</td>\n      <td>Dan</td>\n      <td>Delany</td>\n      <td>10.0</td>\n      <td>typhus</td>\n      <td>NaN</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>1847-04-17</td>\n      <td>Catharine</td>\n      <td>Lyon</td>\n      <td>20.0</td>\n      <td>recent emigrant</td>\n      <td>spinster</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>9579</th>\n      <td>1847-06-17</td>\n      <td>Mary</td>\n      <td>Smith</td>\n      <td>47.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9580</th>\n      <td>1847-06-22</td>\n      <td>Francis</td>\n      <td>Riley</td>\n      <td>29.0</td>\n      <td>lame</td>\n      <td>superintendent</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9581</th>\n      <td>1847-07-02</td>\n      <td>Martin</td>\n      <td>Dunn</td>\n      <td>4.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>m</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9582</th>\n      <td>1847-07-08</td>\n      <td>Elizabeth</td>\n      <td>Post</td>\n      <td>32.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>9583</th>\n      <td>1847-04-28</td>\n      <td>Bridget</td>\n      <td>Ryan</td>\n      <td>28.0</td>\n      <td>destitution</td>\n      <td>spinster</td>\n      <td>w</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5009 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Write to CSV\n\nTo output a new CSV file, we can use the `.to_csv` method with a name for the file in quotation marks. \n\nHere's how we might output a new CSV file that only includes rows with women.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:49:15.846607Z\",\"start_time\":\"2022-11-07T10:49:15.808589Z\"}' execution_count=34}\n``` {.python .cell-code}\nbellevue_women.to_csv(\"Bellevue_women.csv\", encoding='utf-8', index=False)\n```\n:::\n\n\nIn addition to a filename, we're also specifying that the encoding is utf-8 and that the Index (the bolded left-most column) is not included in the CSV file.\n\n## Further Resources\n\n- [10 minutes to Pandas](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html), Pandas Official Documentation\n- [\"Data Manipulation with Pandas\"](https://jakevdp.github.io/PythonDataScienceHandbook/03.00-introduction-to-pandas.html), *Python Data Science*, Jake VanderPlas\n\n",
    "supporting": [
      "03-Pandas-Basics-Part1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}