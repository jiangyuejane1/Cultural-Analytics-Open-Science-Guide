{
  "hash": "aef99553d35ffcd141cbb342c21e7610",
  "result": {
    "markdown": "# Pandas Basics Part 3 — Workbook\n\n___\n\n## Dataset\n### *The Pudding*'s Film Dialogue Data\n\nThe dataset that we're working with in this lesson is taken from Hannah Andersen and Matt Daniels's *Pudding* essay, [\"Film Dialogue from 2,000 screenplays, Broken Down by Gender and Age\"](https://pudding.cool/2017/03/film-dialogue/). The dataset provides information about 2,000 films from 1925 to 2015, including characters’ names, genders, ages, how many words each character spoke in each film, the release year of each film, and how much money the film grossed. They included character gender information because they wanted to contribute data to a broader conversation about how \"white men dominate movie roles.\"\n\n___\n\n## Import Pandas\n\nTo use the Pandas library, we first need to `import` it.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:52.494489Z\",\"start_time\":\"2022-11-07T10:52:52.180698Z\"}' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\n## Change Display Settings\n\nBy default, Pandas will display 60 rows and 20 columns. I often change [Pandas' default display settings](https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html) to show more rows or columns.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:52.707435Z\",\"start_time\":\"2022-11-07T10:52:52.702419Z\"}' execution_count=2}\n``` {.python .cell-code}\npd.options.display.max_rows = 200\n```\n:::\n\n\n## Get Data\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:52.990473Z\",\"start_time\":\"2022-11-07T10:52:52.936445Z\"}' execution_count=3}\n``` {.python .cell-code}\nfilm_df = pd.read_csv('../data/Pudding/Pudding-Film-Dialogue-Clean.csv', delimiter=\",\", encoding='utf-8')\n```\n:::\n\n\nThis creates a Pandas [DataFrame object](https://pandas.pydata.org/pandas-docs/stable/user_guide/dsintro.html#DataFrame) — often abbreviated as *df*, e.g., *slave_voyages_df*. A DataFrame looks and acts a lot like a spreadsheet. But it has special powers and functions that we will discuss in the next few lessons.\n\n## Overview\n\nTo look at a random *n* number of rows in a DataFrame, we can use a method called `.sample()`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:53.566447Z\",\"start_time\":\"2022-11-07T10:52:53.533357Z\"}' execution_count=4}\n``` {.python .cell-code}\nfilm_df.sample(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_year</th>\n      <th>character</th>\n      <th>gender</th>\n      <th>words</th>\n      <th>proportion_of_dialogue</th>\n      <th>age</th>\n      <th>gross</th>\n      <th>script_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10330</th>\n      <td>The Shipping News</td>\n      <td>2001</td>\n      <td>Bayonet Melvill</td>\n      <td>man</td>\n      <td>150</td>\n      <td>0.007124</td>\n      <td>56.0</td>\n      <td>17.0</td>\n      <td>3327</td>\n    </tr>\n    <tr>\n      <th>9671</th>\n      <td>Pleasantville</td>\n      <td>1998</td>\n      <td>George Parker</td>\n      <td>man</td>\n      <td>924</td>\n      <td>0.048832</td>\n      <td>48.0</td>\n      <td>75.0</td>\n      <td>3113</td>\n    </tr>\n    <tr>\n      <th>5594</th>\n      <td>Confidence</td>\n      <td>2003</td>\n      <td>Gordo</td>\n      <td>man</td>\n      <td>772</td>\n      <td>0.065579</td>\n      <td>36.0</td>\n      <td>17.0</td>\n      <td>2050</td>\n    </tr>\n    <tr>\n      <th>14702</th>\n      <td>Salt of the Earth</td>\n      <td>1954</td>\n      <td>Charley Vidal</td>\n      <td>man</td>\n      <td>117</td>\n      <td>0.013763</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>4906</td>\n    </tr>\n    <tr>\n      <th>4318</th>\n      <td>As Good as It Gets</td>\n      <td>1997</td>\n      <td>Hospital Doctor</td>\n      <td>man</td>\n      <td>216</td>\n      <td>0.008882</td>\n      <td>49.0</td>\n      <td>280.0</td>\n      <td>1702</td>\n    </tr>\n    <tr>\n      <th>3861</th>\n      <td>Aliens</td>\n      <td>1986</td>\n      <td>Lydecker</td>\n      <td>man</td>\n      <td>120</td>\n      <td>0.008778</td>\n      <td>32.0</td>\n      <td>199.0</td>\n      <td>1597</td>\n    </tr>\n    <tr>\n      <th>19335</th>\n      <td>Deja Vu</td>\n      <td>2006</td>\n      <td>Ferry Captain</td>\n      <td>man</td>\n      <td>118</td>\n      <td>0.007795</td>\n      <td>NaN</td>\n      <td>85.0</td>\n      <td>7386</td>\n    </tr>\n    <tr>\n      <th>20587</th>\n      <td>My Blue Heaven</td>\n      <td>1990</td>\n      <td>Hannah Stubbs</td>\n      <td>woman</td>\n      <td>804</td>\n      <td>0.486094</td>\n      <td>28.0</td>\n      <td>48.0</td>\n      <td>7926</td>\n    </tr>\n    <tr>\n      <th>22924</th>\n      <td>Virtuosity</td>\n      <td>1995</td>\n      <td>Sid 6.7</td>\n      <td>man</td>\n      <td>1405</td>\n      <td>0.215392</td>\n      <td>31.0</td>\n      <td>48.0</td>\n      <td>9216</td>\n    </tr>\n    <tr>\n      <th>21556</th>\n      <td>Kingdom of Heaven</td>\n      <td>2005</td>\n      <td>Saladin</td>\n      <td>man</td>\n      <td>354</td>\n      <td>0.047954</td>\n      <td>47.0</td>\n      <td>64.0</td>\n      <td>8382</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nGenerate information about all the columns in the data \n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:53.842972Z\",\"start_time\":\"2022-11-07T10:52:53.810616Z\"}' execution_count=5}\n``` {.python .cell-code}\nfilm_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 23047 entries, 0 to 23046\nData columns (total 9 columns):\n #   Column                  Non-Null Count  Dtype  \n---  ------                  --------------  -----  \n 0   title                   23047 non-null  object \n 1   release_year            23047 non-null  int64  \n 2   character               23047 non-null  object \n 3   gender                  23047 non-null  object \n 4   words                   23047 non-null  int64  \n 5   proportion_of_dialogue  23047 non-null  float64\n 6   age                     18262 non-null  float64\n 7   gross                   19386 non-null  float64\n 8   script_id               23047 non-null  int64  \ndtypes: float64(3), int64(3), object(3)\nmemory usage: 1.6+ MB\n```\n:::\n:::\n\n\nJust like Python has different data types, Pandas has different data types, too. These data types are automatically assigned to columns when we read in a CSV file. We can check these Pandas data types with the [`.dtypes` method](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dtypes.html).\n\n\n\n| **Pandas Data Type** |  **Explanation**                                                                                   |\n|:-------------:|:---------------------------------------------------------------------------------------------------:|\n| `object`         | string                                                                               |\n| `float64`         | float                                               |\n| `int64`       | integer                                                        |\n| `datetime64`       |  date time              \n\nMake a histogram of the DataFrame\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:56.077917Z\",\"start_time\":\"2022-11-07T10:52:54.793047Z\"}' execution_count=6}\n``` {.python .cell-code}\nfilm_df.hist(figsize=(10,10))\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([[<AxesSubplot:title={'center':'release_year'}>,\n        <AxesSubplot:title={'center':'words'}>],\n       [<AxesSubplot:title={'center':'proportion_of_dialogue'}>,\n        <AxesSubplot:title={'center':'age'}>],\n       [<AxesSubplot:title={'center':'gross'}>,\n        <AxesSubplot:title={'center':'script_id'}>]], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05.5-Pandas-Basics-Part3-WORKBOOK_files/figure-html/cell-7-output-2.png){}\n:::\n:::\n\n\nGenerate descriptive statistics for all the columns in the data \n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:56.133410Z\",\"start_time\":\"2022-11-07T10:52:56.091841Z\"}' execution_count=7}\n``` {.python .cell-code}\nfilm_df.describe(include='all')\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_year</th>\n      <th>character</th>\n      <th>gender</th>\n      <th>words</th>\n      <th>proportion_of_dialogue</th>\n      <th>age</th>\n      <th>gross</th>\n      <th>script_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>23047</td>\n      <td>23047.000000</td>\n      <td>23047</td>\n      <td>23047</td>\n      <td>23047.000000</td>\n      <td>23047.000000</td>\n      <td>18262.000000</td>\n      <td>19386.000000</td>\n      <td>23047.000000</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>1994</td>\n      <td>NaN</td>\n      <td>17543</td>\n      <td>3</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Lone Star</td>\n      <td>NaN</td>\n      <td>Doctor</td>\n      <td>man</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>40</td>\n      <td>NaN</td>\n      <td>37</td>\n      <td>16131</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>NaN</td>\n      <td>1998.132425</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>907.902634</td>\n      <td>0.086518</td>\n      <td>42.275052</td>\n      <td>106.735428</td>\n      <td>4194.804486</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>14.746052</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1399.616135</td>\n      <td>0.107746</td>\n      <td>57.912595</td>\n      <td>145.861933</td>\n      <td>2473.037601</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>NaN</td>\n      <td>1929.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>101.000000</td>\n      <td>0.001537</td>\n      <td>3.000000</td>\n      <td>0.000000</td>\n      <td>280.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>NaN</td>\n      <td>1992.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>193.000000</td>\n      <td>0.019773</td>\n      <td>30.000000</td>\n      <td>22.000000</td>\n      <td>2095.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>NaN</td>\n      <td>2001.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>396.000000</td>\n      <td>0.042423</td>\n      <td>39.000000</td>\n      <td>56.000000</td>\n      <td>3694.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>NaN</td>\n      <td>2009.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>980.000000</td>\n      <td>0.104171</td>\n      <td>50.000000</td>\n      <td>136.000000</td>\n      <td>6224.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>NaN</td>\n      <td>2015.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>28102.000000</td>\n      <td>0.923422</td>\n      <td>2009.000000</td>\n      <td>1798.000000</td>\n      <td>9254.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### ❓ What patterns or outliers do you notice?\n\n## Drop Rows\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:56.160511Z\",\"start_time\":\"2022-11-07T10:52:56.147248Z\"}' execution_count=8}\n``` {.python .cell-code}\nfilm_df[film_df['age'] > 100]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_year</th>\n      <th>character</th>\n      <th>gender</th>\n      <th>words</th>\n      <th>proportion_of_dialogue</th>\n      <th>age</th>\n      <th>gross</th>\n      <th>script_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4024</th>\n      <td>American Psycho</td>\n      <td>2000</td>\n      <td>Harold Carnes</td>\n      <td>man</td>\n      <td>434</td>\n      <td>0.025271</td>\n      <td>2000.0</td>\n      <td>24.0</td>\n      <td>1639</td>\n    </tr>\n    <tr>\n      <th>5254</th>\n      <td>Case 39</td>\n      <td>2009</td>\n      <td>Margaret Sulliv</td>\n      <td>woman</td>\n      <td>310</td>\n      <td>0.037944</td>\n      <td>2009.0</td>\n      <td>15.0</td>\n      <td>1962</td>\n    </tr>\n    <tr>\n      <th>5370</th>\n      <td>Chaos</td>\n      <td>2005</td>\n      <td>Bernie Callo</td>\n      <td>man</td>\n      <td>244</td>\n      <td>0.015051</td>\n      <td>2005.0</td>\n      <td>NaN</td>\n      <td>1985</td>\n    </tr>\n    <tr>\n      <th>5950</th>\n      <td>The Departed</td>\n      <td>2006</td>\n      <td>Realtor</td>\n      <td>man</td>\n      <td>148</td>\n      <td>0.005575</td>\n      <td>2006.0</td>\n      <td>175.0</td>\n      <td>2144</td>\n    </tr>\n    <tr>\n      <th>6899</th>\n      <td>Get Carter</td>\n      <td>2000</td>\n      <td>Thorpey</td>\n      <td>man</td>\n      <td>133</td>\n      <td>0.026552</td>\n      <td>2000.0</td>\n      <td>24.0</td>\n      <td>2380</td>\n    </tr>\n    <tr>\n      <th>7787</th>\n      <td>Into the Wild</td>\n      <td>2007</td>\n      <td>Bull</td>\n      <td>man</td>\n      <td>188</td>\n      <td>0.009936</td>\n      <td>2007.0</td>\n      <td>23.0</td>\n      <td>2625</td>\n    </tr>\n    <tr>\n      <th>7968</th>\n      <td>Jay and Silent Bob Strike Back</td>\n      <td>2001</td>\n      <td>Silent Bob'S Mo</td>\n      <td>woman</td>\n      <td>224</td>\n      <td>0.009292</td>\n      <td>2001.0</td>\n      <td>46.0</td>\n      <td>2673</td>\n    </tr>\n    <tr>\n      <th>9233</th>\n      <td>Never Been Kissed</td>\n      <td>1999</td>\n      <td>Monty Malik</td>\n      <td>man</td>\n      <td>104</td>\n      <td>0.005219</td>\n      <td>1999.0</td>\n      <td>95.0</td>\n      <td>2986</td>\n    </tr>\n    <tr>\n      <th>9617</th>\n      <td>The Piano</td>\n      <td>1993</td>\n      <td>Nessie</td>\n      <td>woman</td>\n      <td>116</td>\n      <td>0.012262</td>\n      <td>1993.0</td>\n      <td>84.0</td>\n      <td>3095</td>\n    </tr>\n    <tr>\n      <th>9819</th>\n      <td>Raging Bull</td>\n      <td>1980</td>\n      <td>Reporter</td>\n      <td>man</td>\n      <td>300</td>\n      <td>0.013364</td>\n      <td>1980.0</td>\n      <td>NaN</td>\n      <td>3169</td>\n    </tr>\n    <tr>\n      <th>10151</th>\n      <td>Se7en</td>\n      <td>1995</td>\n      <td>Officer Davis</td>\n      <td>man</td>\n      <td>152</td>\n      <td>0.007366</td>\n      <td>1995.0</td>\n      <td>200.0</td>\n      <td>3288</td>\n    </tr>\n    <tr>\n      <th>13600</th>\n      <td>Knight Moves</td>\n      <td>1992</td>\n      <td>Newscaster</td>\n      <td>man</td>\n      <td>120</td>\n      <td>0.012451</td>\n      <td>1992.0</td>\n      <td>1.0</td>\n      <td>4487</td>\n    </tr>\n    <tr>\n      <th>14384</th>\n      <td>Only You</td>\n      <td>1994</td>\n      <td>Himself       (</td>\n      <td>man</td>\n      <td>276</td>\n      <td>0.023730</td>\n      <td>102.0</td>\n      <td>41.0</td>\n      <td>4758</td>\n    </tr>\n    <tr>\n      <th>14757</th>\n      <td>Scream</td>\n      <td>1996</td>\n      <td>Girl In Bathroo</td>\n      <td>woman</td>\n      <td>162</td>\n      <td>0.018510</td>\n      <td>1996.0</td>\n      <td>202.0</td>\n      <td>4920</td>\n    </tr>\n    <tr>\n      <th>19221</th>\n      <td>Borderland</td>\n      <td>2007</td>\n      <td>Captain Ramirez</td>\n      <td>man</td>\n      <td>121</td>\n      <td>0.017430</td>\n      <td>2007.0</td>\n      <td>NaN</td>\n      <td>7351</td>\n    </tr>\n    <tr>\n      <th>21634</th>\n      <td>Last Man Standing</td>\n      <td>1996</td>\n      <td>Jack Mccool</td>\n      <td>man</td>\n      <td>338</td>\n      <td>0.044491</td>\n      <td>1996.0</td>\n      <td>35.0</td>\n      <td>8412</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIf you want to double check, you can examine the [data that the Pudding shared here](https://github.com/matthewfdaniels/scripts/blob/graphs/character_list5.csv) (you can control + F to search for specific characters).\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:56.179848Z\",\"start_time\":\"2022-11-07T10:52:56.173112Z\"}' execution_count=9}\n``` {.python .cell-code}\nfilm_df = film_df.drop(film_df[film_df['age'] > 100].index) \n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:56.206050Z\",\"start_time\":\"2022-11-07T10:52:56.193227Z\"}' execution_count=10}\n``` {.python .cell-code}\nfilm_df\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_year</th>\n      <th>character</th>\n      <th>gender</th>\n      <th>words</th>\n      <th>proportion_of_dialogue</th>\n      <th>age</th>\n      <th>gross</th>\n      <th>script_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Betty</td>\n      <td>woman</td>\n      <td>311</td>\n      <td>0.048639</td>\n      <td>35.0</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Carolyn Johnson</td>\n      <td>woman</td>\n      <td>873</td>\n      <td>0.136534</td>\n      <td>NaN</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Eleanor</td>\n      <td>woman</td>\n      <td>138</td>\n      <td>0.021583</td>\n      <td>NaN</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Francesca Johns</td>\n      <td>woman</td>\n      <td>2251</td>\n      <td>0.352049</td>\n      <td>46.0</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Madge</td>\n      <td>woman</td>\n      <td>190</td>\n      <td>0.029715</td>\n      <td>46.0</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>23042</th>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>Lumiere</td>\n      <td>man</td>\n      <td>1063</td>\n      <td>0.104636</td>\n      <td>56.0</td>\n      <td>452.0</td>\n      <td>9254</td>\n    </tr>\n    <tr>\n      <th>23043</th>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>Maurice</td>\n      <td>man</td>\n      <td>1107</td>\n      <td>0.108967</td>\n      <td>71.0</td>\n      <td>452.0</td>\n      <td>9254</td>\n    </tr>\n    <tr>\n      <th>23044</th>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>Monsieur D'Arqu</td>\n      <td>man</td>\n      <td>114</td>\n      <td>0.011222</td>\n      <td>58.0</td>\n      <td>452.0</td>\n      <td>9254</td>\n    </tr>\n    <tr>\n      <th>23045</th>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>Mrs. Potts</td>\n      <td>woman</td>\n      <td>564</td>\n      <td>0.055517</td>\n      <td>66.0</td>\n      <td>452.0</td>\n      <td>9254</td>\n    </tr>\n    <tr>\n      <th>23046</th>\n      <td>Beauty and the Beast</td>\n      <td>1991</td>\n      <td>Wardrobe</td>\n      <td>woman</td>\n      <td>121</td>\n      <td>0.011911</td>\n      <td>54.0</td>\n      <td>452.0</td>\n      <td>9254</td>\n    </tr>\n  </tbody>\n</table>\n<p>23031 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:56.390630Z\",\"start_time\":\"2022-11-07T10:52:56.383708Z\"}' execution_count=11}\n``` {.python .cell-code}\nfilm_df[film_df['age'] > 100]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_year</th>\n      <th>character</th>\n      <th>gender</th>\n      <th>words</th>\n      <th>proportion_of_dialogue</th>\n      <th>age</th>\n      <th>gross</th>\n      <th>script_id</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Rename Columns\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:56.965576Z\",\"start_time\":\"2022-11-07T10:52:56.957284Z\"}' execution_count=12}\n``` {.python .cell-code}\nfilm_df = film_df.rename(columns={'imdb_character_name': 'character', 'year': 'release_year'})\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:52:57.207060Z\",\"start_time\":\"2022-11-07T10:52:57.183576Z\"}' tags='[\"full-width\"]' execution_count=13}\n``` {.python .cell-code}\nfilm_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>release_year</th>\n      <th>character</th>\n      <th>gender</th>\n      <th>words</th>\n      <th>proportion_of_dialogue</th>\n      <th>age</th>\n      <th>gross</th>\n      <th>script_id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Betty</td>\n      <td>woman</td>\n      <td>311</td>\n      <td>0.048639</td>\n      <td>35.0</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Carolyn Johnson</td>\n      <td>woman</td>\n      <td>873</td>\n      <td>0.136534</td>\n      <td>NaN</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Eleanor</td>\n      <td>woman</td>\n      <td>138</td>\n      <td>0.021583</td>\n      <td>NaN</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Francesca Johns</td>\n      <td>woman</td>\n      <td>2251</td>\n      <td>0.352049</td>\n      <td>46.0</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>The Bridges of Madison County</td>\n      <td>1995</td>\n      <td>Madge</td>\n      <td>woman</td>\n      <td>190</td>\n      <td>0.029715</td>\n      <td>46.0</td>\n      <td>142.0</td>\n      <td>280</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Filter\n\n<div class=\"admonition note\" name=\"html-admonition\" style=\"background: lightblue; padding: 10px\">\nGroup work!\n</div>\n\nFind a specific film that you're intersted and then filter the DataFrame for only rows relevant to that film. \n\nIf you want to search for films by decade and genre, you can [search the with the Pudding's handy data viz here](https://pudding.cool/2017/03/film-dialogue/embed.html).\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:53:29.680549Z\",\"start_time\":\"2022-11-07T10:53:29.676884Z\"}' execution_count=14}\n``` {.python .cell-code}\nfilm_filter = ...\n```\n:::\n\n\nIf you want to sort by characters who speak the most, feel free to add `.sort_values(by='words', ascending=False)`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:53:45.002196Z\",\"start_time\":\"2022-11-07T10:53:44.999032Z\"}' execution_count=15}\n``` {.python .cell-code}\n# film_df[film_filter]\n```\n:::\n\n\nNow pick a character from this film (or another character) and filter the DataFrame by character.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:53:47.151284Z\",\"start_time\":\"2022-11-07T10:53:47.146193Z\"}' execution_count=16}\n``` {.python .cell-code}\ncharacter_filter = ...\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:53:49.217658Z\",\"start_time\":\"2022-11-07T10:53:49.213348Z\"}' execution_count=17}\n``` {.python .cell-code}\n# film_df[character_filter]\n```\n:::\n\n\n### ❓ How does this data align with your experience/knowledge of the film?\n### ❓ How do these specific examples influence your thoughts about the data collection and categorization process? What would you have done differently (if anything)?\n\n## Sort Values\n\n<div class=\"admonition note\" name=\"html-admonition\" style=\"background: lightblue; padding: 10px\">\nGroup work!\n</div>\n\nSort the DataFrame from the character who has the highest `proportion_of_dialogue` to the lowest.  Then examine the first 20 rows with `.head(20)` or `[:20]`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:53:52.618482Z\",\"start_time\":\"2022-11-07T10:53:52.612937Z\"}' execution_count=18}\n``` {.python .cell-code}\n# film_df...\n```\n:::\n\n\nSort the DataFrame from the character who has the lowest `proportion_of_dialogue` to the highest. Then examine the first 20 rows with `.head(20)` or `[:20]`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:02.089138Z\",\"start_time\":\"2022-11-07T10:54:02.085812Z\"}' execution_count=19}\n``` {.python .cell-code}\n#film_df...\n```\n:::\n\n\nSort the DataFrame from the character who speaks the least number of `words` to the character who speaks the most number of words. Then examine the first 20 rows with `.head(20)` or `[:20]`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:07.043950Z\",\"start_time\":\"2022-11-07T10:54:07.040373Z\"}' execution_count=20}\n``` {.python .cell-code}\n# film_df...\n```\n:::\n\n\n### ❓ What patterns do you notice here? What surprises you or doesn't surprise you?\n\n## Groupby\n\nGroup by film and then calculate the sum total for every column.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:11.366222Z\",\"start_time\":\"2022-11-07T10:54:11.361766Z\"}' execution_count=21}\n``` {.python .cell-code}\n# film_df.groupby...\n```\n:::\n\n\nGroup by film, isolate the `words` column, and then calculate the sum total for every column.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:13.828863Z\",\"start_time\":\"2022-11-07T10:54:13.825749Z\"}' execution_count=22}\n``` {.python .cell-code}\n# film_df.groupby...\n```\n:::\n\n\nGroup by film AND gender, isolate the column `words`, and then calculate the sum total for every column.\n\n*Note: Remember that to group by multiple columns, you need to put the column names in square brackets `[]`.*\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:20.645884Z\",\"start_time\":\"2022-11-07T10:54:20.640640Z\"}' execution_count=23}\n``` {.python .cell-code}\n# film_df.groupby...\n```\n:::\n\n\n## Filter, Then Groupby\n\n<div class=\"admonition note\" name=\"html-admonition\" style=\"background: lightblue; padding: 10px\">\nGroup work!\n</div>\n\nFilter the DataFrame for only characters labeled as `woman`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:22.307878Z\",\"start_time\":\"2022-11-07T10:54:22.297895Z\"}' execution_count=24}\n``` {.python .cell-code}\nwomen_filter = film_df['gender'] == 'woman'\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:22.818710Z\",\"start_time\":\"2022-11-07T10:54:22.808914Z\"}' execution_count=25}\n``` {.python .cell-code}\nwomen_film_df = film_df[women_filter]\n```\n:::\n\n\nFilter the DataFrame for only characters labeled as `man`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:23.759380Z\",\"start_time\":\"2022-11-07T10:54:23.748963Z\"}' execution_count=26}\n``` {.python .cell-code}\nmen_filter = film_df['gender'] == 'man'\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:23.992036Z\",\"start_time\":\"2022-11-07T10:54:23.983910Z\"}' execution_count=27}\n``` {.python .cell-code}\nmen_film_df = film_df[men_filter]\n```\n:::\n\n\nNow group `women_film_df` by film, isolate the `words` column, and sum the `words` spoken by women.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:24.460542Z\",\"start_time\":\"2022-11-07T10:54:24.441327Z\"}' execution_count=28}\n``` {.python .cell-code}\nwomen_film_df.groupby('title')['words'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ntitle\n(500) Days of Summer          5738\n10 Things I Hate About You    8992\n12 Years a Slave              3452\n12 and Holding                5324\n127 Hours                      809\n                              ... \nZero Effect                   2216\nZerophilia                    4612\nZodiac                        1421\neXistenZ                      3752\nxXx                            998\nName: words, Length: 1940, dtype: int64\n```\n:::\n:::\n\n\nAssign this Series to a new variable `women_by_film`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:24.999747Z\",\"start_time\":\"2022-11-07T10:54:24.985116Z\"}' execution_count=29}\n``` {.python .cell-code}\nwomen_by_film = women_film_df.groupby('title')['words'].sum()\n```\n:::\n\n\nUsing the same construction, make a new another new variable `men_by_film`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:25.411068Z\",\"start_time\":\"2022-11-07T10:54:25.397182Z\"}' execution_count=30}\n``` {.python .cell-code}\nmen_by_film = men_film_df.groupby('title')['words'].sum()\n```\n:::\n\n\nSort `women_by_film` from the film with the most words to the film with the least words. Then examine the top 20 values.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:26.730847Z\",\"start_time\":\"2022-11-07T10:54:26.718954Z\"}' execution_count=31}\n``` {.python .cell-code}\nwomen_by_film.sort_values(ascending=False)[:20]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\ntitle\nSex and the City               25184\nStepmom                        25014\nSense and Sensibility          23922\nThe Help                       21540\nBeloved                        19594\nGhost World                    18692\nPrecious                       17536\nJuno                           17534\nMusic of the Heart             17274\nDrag Me to Hell                17236\nMargaret                       17229\nAmelia                         17014\nThe Horse Whisperer            16920\nCopycat                        16078\nFrances                        15978\nAgnes of God                   15732\nHe's Just Not That Into You    15708\nAn Education                   14330\nThe Birds                      14284\nWild at Heart                  14014\nName: words, dtype: int64\n```\n:::\n:::\n\n\nAssign this sorted list of movies to the variable `top20_women`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:27.026408Z\",\"start_time\":\"2022-11-07T10:54:27.019378Z\"}' execution_count=32}\n``` {.python .cell-code}\ntop20_women = women_by_film.sort_values(ascending=False)[:20]\n```\n:::\n\n\nUsing the same construction, make a new variable `top20_men`\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:27.353777Z\",\"start_time\":\"2022-11-07T10:54:27.345354Z\"}' execution_count=33}\n``` {.python .cell-code}\ntop20_men = men_by_film.sort_values(ascending=False)[:20]\n```\n:::\n\n\n### ❓ What patterns do you notice here? What surprises you or doesn't surprise you?\n\n## Saving Plots\n\n<div class=\"admonition note\" name=\"html-admonition\" style=\"background: lightblue; padding: 10px\">\nGroup work!\n</div>\n\nMake a bar chart of `top20_women`. Give the chart a title, and specify a color.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:28.483913Z\",\"start_time\":\"2022-11-07T10:54:28.310380Z\"}' execution_count=34}\n``` {.python .cell-code}\ntop20_women.plot(kind='bar')\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n<AxesSubplot:xlabel='title'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05.5-Pandas-Basics-Part3-WORKBOOK_files/figure-html/cell-35-output-2.png){}\n:::\n:::\n\n\nTo save the plot, you can use `ax.figure.savefig()` and the name of the file in quotation marks.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:28.828455Z\",\"start_time\":\"2022-11-07T10:54:28.633611Z\"}' execution_count=35}\n``` {.python .cell-code}\nax = top20_women.plot(kind='bar')\nax.figure.savefig('top20_women.png')\n```\n\n::: {.cell-output .cell-output-display}\n![](05.5-Pandas-Basics-Part3-WORKBOOK_files/figure-html/cell-36-output-1.png){}\n:::\n:::\n\n\nLook in the file browser on the left and double click the PNG file. How does it look? Uh oh!\n\nSometimes parts of a plot will get cut off when you save it. To fix this issue, you can use a function from the Matplotlib library called `plt.tight_layout()`, which will adjust the plot before you save it.\n\nTo use this function, you need to `import matplotlib.pyplot as plt`.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:29.168832Z\",\"start_time\":\"2022-11-07T10:54:28.964468Z\"}' execution_count=36}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nax = top20_women.plot(kind='bar')\nplt.tight_layout()\nax.figure.savefig('top20_women.png')\n```\n\n::: {.cell-output .cell-output-display}\n![](05.5-Pandas-Basics-Part3-WORKBOOK_files/figure-html/cell-37-output-1.png){}\n:::\n:::\n\n\n## Scatter Plots and Line Plots\n\nLet's make a scatter plot that shows how many words women and men speak based on their age.\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:29.444534Z\",\"start_time\":\"2022-11-07T10:54:29.427474Z\"}' execution_count=37}\n``` {.python .cell-code}\nwomen_film_df.groupby('age')['words'].sum().reset_index()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>words</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.0</td>\n      <td>272</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5.0</td>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.0</td>\n      <td>2406</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.0</td>\n      <td>8158</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8.0</td>\n      <td>3260</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>9.0</td>\n      <td>6540</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10.0</td>\n      <td>11771</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>11.0</td>\n      <td>11462</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>12.0</td>\n      <td>17316</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>13.0</td>\n      <td>12580</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>14.0</td>\n      <td>30978</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>15.0</td>\n      <td>16753</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>16.0</td>\n      <td>15125</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>17.0</td>\n      <td>51960</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>18.0</td>\n      <td>65895</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>19.0</td>\n      <td>75581</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>20.0</td>\n      <td>91191</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>21.0</td>\n      <td>88340</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>22.0</td>\n      <td>119782</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>23.0</td>\n      <td>189543</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>24.0</td>\n      <td>156862</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>25.0</td>\n      <td>200371</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>26.0</td>\n      <td>212245</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>27.0</td>\n      <td>196433</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>28.0</td>\n      <td>214608</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>29.0</td>\n      <td>229375</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>30.0</td>\n      <td>215189</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>31.0</td>\n      <td>199967</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>32.0</td>\n      <td>202468</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>33.0</td>\n      <td>257087</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>34.0</td>\n      <td>212368</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>35.0</td>\n      <td>192014</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>36.0</td>\n      <td>150284</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>37.0</td>\n      <td>191203</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>38.0</td>\n      <td>143804</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>39.0</td>\n      <td>120319</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>40.0</td>\n      <td>127718</td>\n    </tr>\n    <tr>\n      <th>37</th>\n      <td>41.0</td>\n      <td>108122</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>42.0</td>\n      <td>83821</td>\n    </tr>\n    <tr>\n      <th>39</th>\n      <td>43.0</td>\n      <td>116319</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>44.0</td>\n      <td>84057</td>\n    </tr>\n    <tr>\n      <th>41</th>\n      <td>45.0</td>\n      <td>81205</td>\n    </tr>\n    <tr>\n      <th>42</th>\n      <td>46.0</td>\n      <td>93950</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>47.0</td>\n      <td>50311</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>48.0</td>\n      <td>73903</td>\n    </tr>\n    <tr>\n      <th>45</th>\n      <td>49.0</td>\n      <td>41492</td>\n    </tr>\n    <tr>\n      <th>46</th>\n      <td>50.0</td>\n      <td>53645</td>\n    </tr>\n    <tr>\n      <th>47</th>\n      <td>51.0</td>\n      <td>35212</td>\n    </tr>\n    <tr>\n      <th>48</th>\n      <td>52.0</td>\n      <td>49020</td>\n    </tr>\n    <tr>\n      <th>49</th>\n      <td>53.0</td>\n      <td>36588</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>54.0</td>\n      <td>51797</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>55.0</td>\n      <td>23539</td>\n    </tr>\n    <tr>\n      <th>52</th>\n      <td>56.0</td>\n      <td>22243</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>57.0</td>\n      <td>23712</td>\n    </tr>\n    <tr>\n      <th>54</th>\n      <td>58.0</td>\n      <td>23403</td>\n    </tr>\n    <tr>\n      <th>55</th>\n      <td>59.0</td>\n      <td>22437</td>\n    </tr>\n    <tr>\n      <th>56</th>\n      <td>60.0</td>\n      <td>26981</td>\n    </tr>\n    <tr>\n      <th>57</th>\n      <td>61.0</td>\n      <td>20807</td>\n    </tr>\n    <tr>\n      <th>58</th>\n      <td>62.0</td>\n      <td>27634</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>63.0</td>\n      <td>15480</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>64.0</td>\n      <td>20937</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>65.0</td>\n      <td>10651</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>66.0</td>\n      <td>17886</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>67.0</td>\n      <td>12602</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>68.0</td>\n      <td>6341</td>\n    </tr>\n    <tr>\n      <th>65</th>\n      <td>69.0</td>\n      <td>11874</td>\n    </tr>\n    <tr>\n      <th>66</th>\n      <td>70.0</td>\n      <td>13405</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>71.0</td>\n      <td>6573</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>72.0</td>\n      <td>9110</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>73.0</td>\n      <td>3932</td>\n    </tr>\n    <tr>\n      <th>70</th>\n      <td>74.0</td>\n      <td>6216</td>\n    </tr>\n    <tr>\n      <th>71</th>\n      <td>75.0</td>\n      <td>11816</td>\n    </tr>\n    <tr>\n      <th>72</th>\n      <td>76.0</td>\n      <td>6779</td>\n    </tr>\n    <tr>\n      <th>73</th>\n      <td>77.0</td>\n      <td>10377</td>\n    </tr>\n    <tr>\n      <th>74</th>\n      <td>78.0</td>\n      <td>7750</td>\n    </tr>\n    <tr>\n      <th>75</th>\n      <td>79.0</td>\n      <td>7306</td>\n    </tr>\n    <tr>\n      <th>76</th>\n      <td>80.0</td>\n      <td>789</td>\n    </tr>\n    <tr>\n      <th>77</th>\n      <td>81.0</td>\n      <td>5659</td>\n    </tr>\n    <tr>\n      <th>78</th>\n      <td>82.0</td>\n      <td>3613</td>\n    </tr>\n    <tr>\n      <th>79</th>\n      <td>83.0</td>\n      <td>535</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>84.0</td>\n      <td>2075</td>\n    </tr>\n    <tr>\n      <th>81</th>\n      <td>85.0</td>\n      <td>4669</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>86.0</td>\n      <td>1307</td>\n    </tr>\n    <tr>\n      <th>83</th>\n      <td>87.0</td>\n      <td>2702</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>88.0</td>\n      <td>510</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>90.0</td>\n      <td>389</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>92.0</td>\n      <td>359</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:29.597158Z\",\"start_time\":\"2022-11-07T10:54:29.592651Z\"}' execution_count=38}\n``` {.python .cell-code}\nwomen_age_words = women_film_df.groupby('age')['words'].sum().reset_index()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:29.773950Z\",\"start_time\":\"2022-11-07T10:54:29.765806Z\"}' execution_count=39}\n``` {.python .cell-code}\nmen_age_words = men_film_df.groupby('age')['words'].sum().reset_index()\n```\n:::\n\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:30.052284Z\",\"start_time\":\"2022-11-07T10:54:29.934059Z\"}' execution_count=40}\n``` {.python .cell-code}\nax = women_age_words.plot(kind='scatter', x='age', y='words', color='red')\nmen_age_words.plot(ax=ax, kind='scatter', x='age', y='words', color='blue')\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n<AxesSubplot:xlabel='age', ylabel='words'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](05.5-Pandas-Basics-Part3-WORKBOOK_files/figure-html/cell-41-output-2.png){}\n:::\n:::\n\n\nNow let's make a line plot of the exact same data. Copy and paste the code in the cell above and change it to produce a line plot instead of a scatter plot.\n\n<div class=\"admonition note\" name=\"html-admonition\" style=\"background: lightblue; padding: 10px\">\nGroup work!\n</div>\n\n::: {.cell ExecuteTime='{\"end_time\":\"2022-11-07T10:54:31.060819Z\",\"start_time\":\"2022-11-07T10:54:31.056227Z\"}' execution_count=41}\n``` {.python .cell-code}\n# Your code here\n# Your code here\n```\n:::\n\n\n",
    "supporting": [
      "05.5-Pandas-Basics-Part3-WORKBOOK_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}